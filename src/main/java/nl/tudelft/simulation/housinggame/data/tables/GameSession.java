/*
 * This file is generated by jOOQ.
 */
package nl.tudelft.simulation.housinggame.data.tables;


import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import nl.tudelft.simulation.housinggame.data.Gamedata;
import nl.tudelft.simulation.housinggame.data.Indexes;
import nl.tudelft.simulation.housinggame.data.Keys;
import nl.tudelft.simulation.housinggame.data.tables.records.GameSessionRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GameSession extends TableImpl<GameSessionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>gamedata.game_session</code>
     */
    public static final GameSession GAME_SESSION = new GameSession();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GameSessionRecord> getRecordType() {
        return GameSessionRecord.class;
    }

    /**
     * The column <code>gamedata.game_session.id</code>.
     */
    public final TableField<GameSessionRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>gamedata.game_session.name</code>.
     */
    public final TableField<GameSessionRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>gamedata.game_session.date</code>.
     */
    public final TableField<GameSessionRecord, LocalDate> DATE = createField(DSL.name("date"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>gamedata.game_session.game_id</code>.
     */
    public final TableField<GameSessionRecord, Integer> GAME_ID = createField(DSL.name("game_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private GameSession(Name alias, Table<GameSessionRecord> aliased) {
        this(alias, aliased, null);
    }

    private GameSession(Name alias, Table<GameSessionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>gamedata.game_session</code> table reference
     */
    public GameSession(String alias) {
        this(DSL.name(alias), GAME_SESSION);
    }

    /**
     * Create an aliased <code>gamedata.game_session</code> table reference
     */
    public GameSession(Name alias) {
        this(alias, GAME_SESSION);
    }

    /**
     * Create a <code>gamedata.game_session</code> table reference
     */
    public GameSession() {
        this(DSL.name("game_session"), null);
    }

    public <O extends Record> GameSession(Table<O> child, ForeignKey<O, GameSessionRecord> key) {
        super(child, key, GAME_SESSION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Gamedata.GAMEDATA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.GAME_SESSION_FK_GAMEVERSION_GAME1_IDX);
    }

    @Override
    public Identity<GameSessionRecord, Integer> getIdentity() {
        return (Identity<GameSessionRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<GameSessionRecord> getPrimaryKey() {
        return Keys.KEY_GAME_SESSION_PRIMARY;
    }

    @Override
    public List<UniqueKey<GameSessionRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_GAME_SESSION_ID_UNIQUE);
    }

    @Override
    public List<ForeignKey<GameSessionRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_GAMEVERSION_GAME1);
    }

    private transient Game _game;

    /**
     * Get the implicit join path to the <code>gamedata.game</code> table.
     */
    public Game game() {
        if (_game == null)
            _game = new Game(this, Keys.FK_GAMEVERSION_GAME1);

        return _game;
    }

    @Override
    public GameSession as(String alias) {
        return new GameSession(DSL.name(alias), this);
    }

    @Override
    public GameSession as(Name alias) {
        return new GameSession(alias, this);
    }

    @Override
    public GameSession as(Table<?> alias) {
        return new GameSession(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public GameSession rename(String name) {
        return new GameSession(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public GameSession rename(Name name) {
        return new GameSession(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public GameSession rename(Table<?> name) {
        return new GameSession(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, LocalDate, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Integer, ? super String, ? super LocalDate, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Integer, ? super String, ? super LocalDate, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
