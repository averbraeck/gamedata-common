/*
 * This file is generated by jOOQ.
 */
package nl.tudelft.simulation.housinggame.data.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import nl.tudelft.simulation.housinggame.data.Gamedata;
import nl.tudelft.simulation.housinggame.data.Indexes;
import nl.tudelft.simulation.housinggame.data.Keys;
import nl.tudelft.simulation.housinggame.data.tables.records.PlayerScoreRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function8;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PlayerScore extends TableImpl<PlayerScoreRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>gamedata.player_score</code>
     */
    public static final PlayerScore PLAYER_SCORE = new PlayerScore();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PlayerScoreRecord> getRecordType() {
        return PlayerScoreRecord.class;
    }

    /**
     * The column <code>gamedata.player_score.id</code>.
     */
    public final TableField<PlayerScoreRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>gamedata.player_score.score_type</code>.
     */
    public final TableField<PlayerScoreRecord, String> SCORE_TYPE = createField(DSL.name("score_type"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>gamedata.player_score.delta</code>.
     */
    public final TableField<PlayerScoreRecord, Double> DELTA = createField(DSL.name("delta"), SQLDataType.FLOAT.nullable(false), this, "");

    /**
     * The column <code>gamedata.player_score.new_score</code>.
     */
    public final TableField<PlayerScoreRecord, Double> NEW_SCORE = createField(DSL.name("new_score"), SQLDataType.FLOAT.nullable(false), this, "");

    /**
     * The column <code>gamedata.player_score.timestamp</code>.
     */
    public final TableField<PlayerScoreRecord, LocalDateTime> TIMESTAMP = createField(DSL.name("timestamp"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("current_timestamp()"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>gamedata.player_score.mission_attempt</code>.
     */
    public final TableField<PlayerScoreRecord, Integer> MISSION_ATTEMPT = createField(DSL.name("mission_attempt"), SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>gamedata.player_score.final_score</code>.
     */
    public final TableField<PlayerScoreRecord, Byte> FINAL_SCORE = createField(DSL.name("final_score"), SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>gamedata.player_score.player_id</code>.
     */
    public final TableField<PlayerScoreRecord, Integer> PLAYER_ID = createField(DSL.name("player_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private PlayerScore(Name alias, Table<PlayerScoreRecord> aliased) {
        this(alias, aliased, null);
    }

    private PlayerScore(Name alias, Table<PlayerScoreRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>gamedata.player_score</code> table reference
     */
    public PlayerScore(String alias) {
        this(DSL.name(alias), PLAYER_SCORE);
    }

    /**
     * Create an aliased <code>gamedata.player_score</code> table reference
     */
    public PlayerScore(Name alias) {
        this(alias, PLAYER_SCORE);
    }

    /**
     * Create a <code>gamedata.player_score</code> table reference
     */
    public PlayerScore() {
        this(DSL.name("player_score"), null);
    }

    public <O extends Record> PlayerScore(Table<O> child, ForeignKey<O, PlayerScoreRecord> key) {
        super(child, key, PLAYER_SCORE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Gamedata.GAMEDATA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.PLAYER_SCORE_FK_PLAYERSCORE_PLAYER1_IDX);
    }

    @Override
    public Identity<PlayerScoreRecord, Integer> getIdentity() {
        return (Identity<PlayerScoreRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<PlayerScoreRecord> getPrimaryKey() {
        return Keys.KEY_PLAYER_SCORE_PRIMARY;
    }

    @Override
    public List<UniqueKey<PlayerScoreRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_PLAYER_SCORE_ID_UNIQUE);
    }

    @Override
    public List<ForeignKey<PlayerScoreRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_PLAYERSCORE_PLAYER1);
    }

    private transient Player _player;

    /**
     * Get the implicit join path to the <code>gamedata.player</code> table.
     */
    public Player player() {
        if (_player == null)
            _player = new Player(this, Keys.FK_PLAYERSCORE_PLAYER1);

        return _player;
    }

    @Override
    public PlayerScore as(String alias) {
        return new PlayerScore(DSL.name(alias), this);
    }

    @Override
    public PlayerScore as(Name alias) {
        return new PlayerScore(alias, this);
    }

    @Override
    public PlayerScore as(Table<?> alias) {
        return new PlayerScore(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PlayerScore rename(String name) {
        return new PlayerScore(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PlayerScore rename(Name name) {
        return new PlayerScore(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PlayerScore rename(Table<?> name) {
        return new PlayerScore(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, String, Double, Double, LocalDateTime, Integer, Byte, Integer> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function8<? super Integer, ? super String, ? super Double, ? super Double, ? super LocalDateTime, ? super Integer, ? super Byte, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function8<? super Integer, ? super String, ? super Double, ? super Double, ? super LocalDateTime, ? super Integer, ? super Byte, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
