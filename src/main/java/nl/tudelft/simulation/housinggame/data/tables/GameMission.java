/*
 * This file is generated by jOOQ.
 */
package nl.tudelft.simulation.housinggame.data.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import nl.tudelft.simulation.housinggame.data.Gamedata;
import nl.tudelft.simulation.housinggame.data.Indexes;
import nl.tudelft.simulation.housinggame.data.Keys;
import nl.tudelft.simulation.housinggame.data.tables.records.GameMissionRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GameMission extends TableImpl<GameMissionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>gamedata.game_mission</code>
     */
    public static final GameMission GAME_MISSION = new GameMission();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GameMissionRecord> getRecordType() {
        return GameMissionRecord.class;
    }

    /**
     * The column <code>gamedata.game_mission.id</code>.
     */
    public final TableField<GameMissionRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>gamedata.game_mission.name</code>.
     */
    public final TableField<GameMissionRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>gamedata.game_mission.gameversion_id</code>.
     */
    public final TableField<GameMissionRecord, Integer> GAMEVERSION_ID = createField(DSL.name("gameversion_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private GameMission(Name alias, Table<GameMissionRecord> aliased) {
        this(alias, aliased, null);
    }

    private GameMission(Name alias, Table<GameMissionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>gamedata.game_mission</code> table reference
     */
    public GameMission(String alias) {
        this(DSL.name(alias), GAME_MISSION);
    }

    /**
     * Create an aliased <code>gamedata.game_mission</code> table reference
     */
    public GameMission(Name alias) {
        this(alias, GAME_MISSION);
    }

    /**
     * Create a <code>gamedata.game_mission</code> table reference
     */
    public GameMission() {
        this(DSL.name("game_mission"), null);
    }

    public <O extends Record> GameMission(Table<O> child, ForeignKey<O, GameMissionRecord> key) {
        super(child, key, GAME_MISSION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Gamedata.GAMEDATA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.GAME_MISSION_FK_GAMESESSION_GAMEVERSION1_IDX);
    }

    @Override
    public Identity<GameMissionRecord, Integer> getIdentity() {
        return (Identity<GameMissionRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<GameMissionRecord> getPrimaryKey() {
        return Keys.KEY_GAME_MISSION_PRIMARY;
    }

    @Override
    public List<UniqueKey<GameMissionRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_GAME_MISSION_ID_UNIQUE);
    }

    @Override
    public List<ForeignKey<GameMissionRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_GAMESESSION_GAMEVERSION1);
    }

    private transient GameSession _gameSession;

    /**
     * Get the implicit join path to the <code>gamedata.game_session</code>
     * table.
     */
    public GameSession gameSession() {
        if (_gameSession == null)
            _gameSession = new GameSession(this, Keys.FK_GAMESESSION_GAMEVERSION1);

        return _gameSession;
    }

    @Override
    public GameMission as(String alias) {
        return new GameMission(DSL.name(alias), this);
    }

    @Override
    public GameMission as(Name alias) {
        return new GameMission(alias, this);
    }

    @Override
    public GameMission as(Table<?> alias) {
        return new GameMission(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public GameMission rename(String name) {
        return new GameMission(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public GameMission rename(Name name) {
        return new GameMission(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public GameMission rename(Table<?> name) {
        return new GameMission(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super Integer, ? super String, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super Integer, ? super String, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
