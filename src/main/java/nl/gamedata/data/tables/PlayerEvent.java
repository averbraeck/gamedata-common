/*
 * This file is generated by jOOQ.
 */
package nl.gamedata.data.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import nl.gamedata.data.Gamedata;
import nl.gamedata.data.Indexes;
import nl.gamedata.data.Keys;
import nl.gamedata.data.tables.PlayerAttempt.PlayerAttemptPath;
import nl.gamedata.data.tables.records.PlayerEventRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PlayerEvent extends TableImpl<PlayerEventRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>gamedata.player_event</code>
     */
    public static final PlayerEvent PLAYER_EVENT = new PlayerEvent();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PlayerEventRecord> getRecordType() {
        return PlayerEventRecord.class;
    }

    /**
     * The column <code>gamedata.player_event.id</code>.
     */
    public final TableField<PlayerEventRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>gamedata.player_event.type</code>.
     */
    public final TableField<PlayerEventRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(45).nullable(false).defaultValue(DSL.field(DSL.raw("'DEFAULT'"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>gamedata.player_event.key</code>.
     */
    public final TableField<PlayerEventRecord, String> KEY = createField(DSL.name("key"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>gamedata.player_event.value</code>.
     */
    public final TableField<PlayerEventRecord, String> VALUE = createField(DSL.name("value"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>gamedata.player_event.timestamp</code>.
     */
    public final TableField<PlayerEventRecord, LocalDateTime> TIMESTAMP = createField(DSL.name("timestamp"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("current_timestamp()"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>gamedata.player_event.status</code>.
     */
    public final TableField<PlayerEventRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(45).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>gamedata.player_event.round</code>.
     */
    public final TableField<PlayerEventRecord, String> ROUND = createField(DSL.name("round"), SQLDataType.VARCHAR(16).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>gamedata.player_event.game_time</code>.
     */
    public final TableField<PlayerEventRecord, String> GAME_TIME = createField(DSL.name("game_time"), SQLDataType.VARCHAR(45).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>gamedata.player_event.grouping_code</code>.
     */
    public final TableField<PlayerEventRecord, String> GROUPING_CODE = createField(DSL.name("grouping_code"), SQLDataType.VARCHAR(45).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>gamedata.player_event.player_initiated</code>.
     */
    public final TableField<PlayerEventRecord, Byte> PLAYER_INITIATED = createField(DSL.name("player_initiated"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>gamedata.player_event.player_attempt_id</code>.
     */
    public final TableField<PlayerEventRecord, Integer> PLAYER_ATTEMPT_ID = createField(DSL.name("player_attempt_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private PlayerEvent(Name alias, Table<PlayerEventRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private PlayerEvent(Name alias, Table<PlayerEventRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>gamedata.player_event</code> table reference
     */
    public PlayerEvent(String alias) {
        this(DSL.name(alias), PLAYER_EVENT);
    }

    /**
     * Create an aliased <code>gamedata.player_event</code> table reference
     */
    public PlayerEvent(Name alias) {
        this(alias, PLAYER_EVENT);
    }

    /**
     * Create a <code>gamedata.player_event</code> table reference
     */
    public PlayerEvent() {
        this(DSL.name("player_event"), null);
    }

    public <O extends Record> PlayerEvent(Table<O> path, ForeignKey<O, PlayerEventRecord> childPath, InverseForeignKey<O, PlayerEventRecord> parentPath) {
        super(path, childPath, parentPath, PLAYER_EVENT);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class PlayerEventPath extends PlayerEvent implements Path<PlayerEventRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> PlayerEventPath(Table<O> path, ForeignKey<O, PlayerEventRecord> childPath, InverseForeignKey<O, PlayerEventRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private PlayerEventPath(Name alias, Table<PlayerEventRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public PlayerEventPath as(String alias) {
            return new PlayerEventPath(DSL.name(alias), this);
        }

        @Override
        public PlayerEventPath as(Name alias) {
            return new PlayerEventPath(alias, this);
        }

        @Override
        public PlayerEventPath as(Table<?> alias) {
            return new PlayerEventPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Gamedata.GAMEDATA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.PLAYER_EVENT_FK_PLAYER_EVENT_PLAYER_ATTEMPT1_IDX);
    }

    @Override
    public Identity<PlayerEventRecord, Integer> getIdentity() {
        return (Identity<PlayerEventRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<PlayerEventRecord> getPrimaryKey() {
        return Keys.KEY_PLAYER_EVENT_PRIMARY;
    }

    @Override
    public List<UniqueKey<PlayerEventRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_PLAYER_EVENT_ID_UNIQUE);
    }

    @Override
    public List<ForeignKey<PlayerEventRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_PLAYER_EVENT_PLAYER_ATTEMPT1);
    }

    private transient PlayerAttemptPath _playerAttempt;

    /**
     * Get the implicit join path to the <code>gamedata.player_attempt</code>
     * table.
     */
    public PlayerAttemptPath playerAttempt() {
        if (_playerAttempt == null)
            _playerAttempt = new PlayerAttemptPath(this, Keys.FK_PLAYER_EVENT_PLAYER_ATTEMPT1, null);

        return _playerAttempt;
    }

    @Override
    public PlayerEvent as(String alias) {
        return new PlayerEvent(DSL.name(alias), this);
    }

    @Override
    public PlayerEvent as(Name alias) {
        return new PlayerEvent(alias, this);
    }

    @Override
    public PlayerEvent as(Table<?> alias) {
        return new PlayerEvent(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PlayerEvent rename(String name) {
        return new PlayerEvent(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PlayerEvent rename(Name name) {
        return new PlayerEvent(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PlayerEvent rename(Table<?> name) {
        return new PlayerEvent(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PlayerEvent where(Condition condition) {
        return new PlayerEvent(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PlayerEvent where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PlayerEvent where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PlayerEvent where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PlayerEvent where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PlayerEvent where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PlayerEvent where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PlayerEvent where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PlayerEvent whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PlayerEvent whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
