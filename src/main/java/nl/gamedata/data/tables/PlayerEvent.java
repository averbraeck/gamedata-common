/*
 * This file is generated by jOOQ.
 */
package nl.gamedata.data.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import nl.gamedata.data.Gamedata;
import nl.gamedata.data.Indexes;
import nl.gamedata.data.Keys;
import nl.gamedata.data.tables.records.PlayerEventRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function12;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PlayerEvent extends TableImpl<PlayerEventRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>gamedata.player_event</code>
     */
    public static final PlayerEvent PLAYER_EVENT = new PlayerEvent();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PlayerEventRecord> getRecordType() {
        return PlayerEventRecord.class;
    }

    /**
     * The column <code>gamedata.player_event.id</code>.
     */
    public final TableField<PlayerEventRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>gamedata.player_event.type</code>.
     */
    public final TableField<PlayerEventRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>gamedata.player_event.key</code>.
     */
    public final TableField<PlayerEventRecord, String> KEY = createField(DSL.name("key"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>gamedata.player_event.value</code>.
     */
    public final TableField<PlayerEventRecord, String> VALUE = createField(DSL.name("value"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>gamedata.player_event.timestamp</code>.
     */
    public final TableField<PlayerEventRecord, LocalDateTime> TIMESTAMP = createField(DSL.name("timestamp"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("current_timestamp()"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>gamedata.player_event.mission_attempt</code>.
     */
    public final TableField<PlayerEventRecord, Integer> MISSION_ATTEMPT = createField(DSL.name("mission_attempt"), SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>gamedata.player_event.status</code>.
     */
    public final TableField<PlayerEventRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(45).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>gamedata.player_event.round</code>.
     */
    public final TableField<PlayerEventRecord, String> ROUND = createField(DSL.name("round"), SQLDataType.VARCHAR(16).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>gamedata.player_event.game_time</code>.
     */
    public final TableField<PlayerEventRecord, String> GAME_TIME = createField(DSL.name("game_time"), SQLDataType.VARCHAR(45).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>gamedata.player_event.grouping_code</code>.
     */
    public final TableField<PlayerEventRecord, String> GROUPING_CODE = createField(DSL.name("grouping_code"), SQLDataType.VARCHAR(45).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>gamedata.player_event.player_initiated</code>.
     */
    public final TableField<PlayerEventRecord, Byte> PLAYER_INITIATED = createField(DSL.name("player_initiated"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>gamedata.player_event.player_attempt_id</code>.
     */
    public final TableField<PlayerEventRecord, Integer> PLAYER_ATTEMPT_ID = createField(DSL.name("player_attempt_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private PlayerEvent(Name alias, Table<PlayerEventRecord> aliased) {
        this(alias, aliased, null);
    }

    private PlayerEvent(Name alias, Table<PlayerEventRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>gamedata.player_event</code> table reference
     */
    public PlayerEvent(String alias) {
        this(DSL.name(alias), PLAYER_EVENT);
    }

    /**
     * Create an aliased <code>gamedata.player_event</code> table reference
     */
    public PlayerEvent(Name alias) {
        this(alias, PLAYER_EVENT);
    }

    /**
     * Create a <code>gamedata.player_event</code> table reference
     */
    public PlayerEvent() {
        this(DSL.name("player_event"), null);
    }

    public <O extends Record> PlayerEvent(Table<O> child, ForeignKey<O, PlayerEventRecord> key) {
        super(child, key, PLAYER_EVENT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Gamedata.GAMEDATA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.PLAYER_EVENT_FK_PLAYER_LOGDATA_PLAYER_ATTEMPT1_IDX);
    }

    @Override
    public Identity<PlayerEventRecord, Integer> getIdentity() {
        return (Identity<PlayerEventRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<PlayerEventRecord> getPrimaryKey() {
        return Keys.KEY_PLAYER_EVENT_PRIMARY;
    }

    @Override
    public List<UniqueKey<PlayerEventRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_PLAYER_EVENT_ID_UNIQUE);
    }

    @Override
    public List<ForeignKey<PlayerEventRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_PLAYER_LOGDATA_PLAYER_ATTEMPT1);
    }

    private transient PlayerAttempt _playerAttempt;

    /**
     * Get the implicit join path to the <code>gamedata.player_attempt</code>
     * table.
     */
    public PlayerAttempt playerAttempt() {
        if (_playerAttempt == null)
            _playerAttempt = new PlayerAttempt(this, Keys.FK_PLAYER_LOGDATA_PLAYER_ATTEMPT1);

        return _playerAttempt;
    }

    @Override
    public PlayerEvent as(String alias) {
        return new PlayerEvent(DSL.name(alias), this);
    }

    @Override
    public PlayerEvent as(Name alias) {
        return new PlayerEvent(alias, this);
    }

    @Override
    public PlayerEvent as(Table<?> alias) {
        return new PlayerEvent(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PlayerEvent rename(String name) {
        return new PlayerEvent(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PlayerEvent rename(Name name) {
        return new PlayerEvent(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PlayerEvent rename(Table<?> name) {
        return new PlayerEvent(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<Integer, String, String, String, LocalDateTime, Integer, String, String, String, String, Byte, Integer> fieldsRow() {
        return (Row12) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function12<? super Integer, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super Integer, ? super String, ? super String, ? super String, ? super String, ? super Byte, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function12<? super Integer, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super Integer, ? super String, ? super String, ? super String, ? super String, ? super Byte, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
