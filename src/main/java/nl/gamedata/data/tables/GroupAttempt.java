/*
 * This file is generated by jOOQ.
 */
package nl.gamedata.data.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import nl.gamedata.data.Gamedata;
import nl.gamedata.data.Indexes;
import nl.gamedata.data.Keys;
import nl.gamedata.data.tables.GameMission.GameMissionPath;
import nl.gamedata.data.tables.Group.GroupPath;
import nl.gamedata.data.tables.GroupEvent.GroupEventPath;
import nl.gamedata.data.tables.GroupScore.GroupScorePath;
import nl.gamedata.data.tables.records.GroupAttemptRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GroupAttempt extends TableImpl<GroupAttemptRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>gamedata.group_attempt</code>
     */
    public static final GroupAttempt GROUP_ATTEMPT = new GroupAttempt();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GroupAttemptRecord> getRecordType() {
        return GroupAttemptRecord.class;
    }

    /**
     * The column <code>gamedata.group_attempt.id</code>.
     */
    public final TableField<GroupAttemptRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>gamedata.group_attempt.attempt_nr</code>.
     */
    public final TableField<GroupAttemptRecord, Integer> ATTEMPT_NR = createField(DSL.name("attempt_nr"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>gamedata.group_attempt.status</code>.
     */
    public final TableField<GroupAttemptRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>gamedata.group_attempt.group_id</code>.
     */
    public final TableField<GroupAttemptRecord, Integer> GROUP_ID = createField(DSL.name("group_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>gamedata.group_attempt.game_mission_id</code>.
     */
    public final TableField<GroupAttemptRecord, Integer> GAME_MISSION_ID = createField(DSL.name("game_mission_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private GroupAttempt(Name alias, Table<GroupAttemptRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private GroupAttempt(Name alias, Table<GroupAttemptRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>gamedata.group_attempt</code> table reference
     */
    public GroupAttempt(String alias) {
        this(DSL.name(alias), GROUP_ATTEMPT);
    }

    /**
     * Create an aliased <code>gamedata.group_attempt</code> table reference
     */
    public GroupAttempt(Name alias) {
        this(alias, GROUP_ATTEMPT);
    }

    /**
     * Create a <code>gamedata.group_attempt</code> table reference
     */
    public GroupAttempt() {
        this(DSL.name("group_attempt"), null);
    }

    public <O extends Record> GroupAttempt(Table<O> path, ForeignKey<O, GroupAttemptRecord> childPath, InverseForeignKey<O, GroupAttemptRecord> parentPath) {
        super(path, childPath, parentPath, GROUP_ATTEMPT);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class GroupAttemptPath extends GroupAttempt implements Path<GroupAttemptRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> GroupAttemptPath(Table<O> path, ForeignKey<O, GroupAttemptRecord> childPath, InverseForeignKey<O, GroupAttemptRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private GroupAttemptPath(Name alias, Table<GroupAttemptRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public GroupAttemptPath as(String alias) {
            return new GroupAttemptPath(DSL.name(alias), this);
        }

        @Override
        public GroupAttemptPath as(Name alias) {
            return new GroupAttemptPath(alias, this);
        }

        @Override
        public GroupAttemptPath as(Table<?> alias) {
            return new GroupAttemptPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Gamedata.GAMEDATA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.GROUP_ATTEMPT_FK_GROUP_ATTEMPT_GAME_MISSION1_IDX, Indexes.GROUP_ATTEMPT_FK_GROUP_ATTEMPT_GROUP1_IDX);
    }

    @Override
    public Identity<GroupAttemptRecord, Integer> getIdentity() {
        return (Identity<GroupAttemptRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<GroupAttemptRecord> getPrimaryKey() {
        return Keys.KEY_GROUP_ATTEMPT_PRIMARY;
    }

    @Override
    public List<UniqueKey<GroupAttemptRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_GROUP_ATTEMPT_ID_UNIQUE);
    }

    @Override
    public List<ForeignKey<GroupAttemptRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_GROUP_ATTEMPT_GAME_MISSION1, Keys.FK_GROUP_ATTEMPT_GROUP1);
    }

    private transient GameMissionPath _gameMission;

    /**
     * Get the implicit join path to the <code>gamedata.game_mission</code>
     * table.
     */
    public GameMissionPath gameMission() {
        if (_gameMission == null)
            _gameMission = new GameMissionPath(this, Keys.FK_GROUP_ATTEMPT_GAME_MISSION1, null);

        return _gameMission;
    }

    private transient GroupPath _group;

    /**
     * Get the implicit join path to the <code>gamedata.group</code> table.
     */
    public GroupPath group() {
        if (_group == null)
            _group = new GroupPath(this, Keys.FK_GROUP_ATTEMPT_GROUP1, null);

        return _group;
    }

    private transient GroupEventPath _groupEvent;

    /**
     * Get the implicit to-many join path to the
     * <code>gamedata.group_event</code> table
     */
    public GroupEventPath groupEvent() {
        if (_groupEvent == null)
            _groupEvent = new GroupEventPath(this, null, Keys.FK_GROUP_EVENT_GROUP_ATTEMPT1.getInverseKey());

        return _groupEvent;
    }

    private transient GroupScorePath _groupScore;

    /**
     * Get the implicit to-many join path to the
     * <code>gamedata.group_score</code> table
     */
    public GroupScorePath groupScore() {
        if (_groupScore == null)
            _groupScore = new GroupScorePath(this, null, Keys.FK_GROUP_SCORE_GROUP_ATTEMPT1.getInverseKey());

        return _groupScore;
    }

    @Override
    public GroupAttempt as(String alias) {
        return new GroupAttempt(DSL.name(alias), this);
    }

    @Override
    public GroupAttempt as(Name alias) {
        return new GroupAttempt(alias, this);
    }

    @Override
    public GroupAttempt as(Table<?> alias) {
        return new GroupAttempt(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public GroupAttempt rename(String name) {
        return new GroupAttempt(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public GroupAttempt rename(Name name) {
        return new GroupAttempt(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public GroupAttempt rename(Table<?> name) {
        return new GroupAttempt(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public GroupAttempt where(Condition condition) {
        return new GroupAttempt(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public GroupAttempt where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public GroupAttempt where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public GroupAttempt where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public GroupAttempt where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public GroupAttempt where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public GroupAttempt where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public GroupAttempt where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public GroupAttempt whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public GroupAttempt whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
