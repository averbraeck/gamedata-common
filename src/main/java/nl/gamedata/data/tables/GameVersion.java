/*
 * This file is generated by jOOQ.
 */
package nl.gamedata.data.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import nl.gamedata.data.Gamedata;
import nl.gamedata.data.Indexes;
import nl.gamedata.data.Keys;
import nl.gamedata.data.tables.DashboardTemplate.DashboardTemplatePath;
import nl.gamedata.data.tables.Game.GamePath;
import nl.gamedata.data.tables.GameMission.GameMissionPath;
import nl.gamedata.data.tables.GameSession.GameSessionPath;
import nl.gamedata.data.tables.records.GameVersionRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GameVersion extends TableImpl<GameVersionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>gamedata.game_version</code>
     */
    public static final GameVersion GAME_VERSION = new GameVersion();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GameVersionRecord> getRecordType() {
        return GameVersionRecord.class;
    }

    /**
     * The column <code>gamedata.game_version.id</code>.
     */
    public final TableField<GameVersionRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>gamedata.game_version.code</code>.
     */
    public final TableField<GameVersionRecord, String> CODE = createField(DSL.name("code"), SQLDataType.VARCHAR(16).nullable(false), this, "");

    /**
     * The column <code>gamedata.game_version.name</code>.
     */
    public final TableField<GameVersionRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>gamedata.game_version.description</code>.
     */
    public final TableField<GameVersionRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>gamedata.game_version.archived</code>.
     */
    public final TableField<GameVersionRecord, Byte> ARCHIVED = createField(DSL.name("archived"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>gamedata.game_version.game_id</code>.
     */
    public final TableField<GameVersionRecord, Integer> GAME_ID = createField(DSL.name("game_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private GameVersion(Name alias, Table<GameVersionRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private GameVersion(Name alias, Table<GameVersionRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>gamedata.game_version</code> table reference
     */
    public GameVersion(String alias) {
        this(DSL.name(alias), GAME_VERSION);
    }

    /**
     * Create an aliased <code>gamedata.game_version</code> table reference
     */
    public GameVersion(Name alias) {
        this(alias, GAME_VERSION);
    }

    /**
     * Create a <code>gamedata.game_version</code> table reference
     */
    public GameVersion() {
        this(DSL.name("game_version"), null);
    }

    public <O extends Record> GameVersion(Table<O> path, ForeignKey<O, GameVersionRecord> childPath, InverseForeignKey<O, GameVersionRecord> parentPath) {
        super(path, childPath, parentPath, GAME_VERSION);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class GameVersionPath extends GameVersion implements Path<GameVersionRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> GameVersionPath(Table<O> path, ForeignKey<O, GameVersionRecord> childPath, InverseForeignKey<O, GameVersionRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private GameVersionPath(Name alias, Table<GameVersionRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public GameVersionPath as(String alias) {
            return new GameVersionPath(DSL.name(alias), this);
        }

        @Override
        public GameVersionPath as(Name alias) {
            return new GameVersionPath(alias, this);
        }

        @Override
        public GameVersionPath as(Table<?> alias) {
            return new GameVersionPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Gamedata.GAMEDATA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.GAME_VERSION_FK_GAME_VERSION_GAME1_IDX);
    }

    @Override
    public Identity<GameVersionRecord, Integer> getIdentity() {
        return (Identity<GameVersionRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<GameVersionRecord> getPrimaryKey() {
        return Keys.KEY_GAME_VERSION_PRIMARY;
    }

    @Override
    public List<UniqueKey<GameVersionRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_GAME_VERSION_ID_UNIQUE);
    }

    @Override
    public List<ForeignKey<GameVersionRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_GAME_VERSION_GAME1);
    }

    private transient GamePath _game;

    /**
     * Get the implicit join path to the <code>gamedata.game</code> table.
     */
    public GamePath game() {
        if (_game == null)
            _game = new GamePath(this, Keys.FK_GAME_VERSION_GAME1, null);

        return _game;
    }

    private transient DashboardTemplatePath _dashboardTemplate;

    /**
     * Get the implicit to-many join path to the
     * <code>gamedata.dashboard_template</code> table
     */
    public DashboardTemplatePath dashboardTemplate() {
        if (_dashboardTemplate == null)
            _dashboardTemplate = new DashboardTemplatePath(this, null, Keys.FK_DASHBOARD_TEMPLATE_GAME_VERSION1.getInverseKey());

        return _dashboardTemplate;
    }

    private transient GameMissionPath _gameMission;

    /**
     * Get the implicit to-many join path to the
     * <code>gamedata.game_mission</code> table
     */
    public GameMissionPath gameMission() {
        if (_gameMission == null)
            _gameMission = new GameMissionPath(this, null, Keys.FK_GAME_MISSION_GAME_VERSION1.getInverseKey());

        return _gameMission;
    }

    private transient GameSessionPath _gameSession;

    /**
     * Get the implicit to-many join path to the
     * <code>gamedata.game_session</code> table
     */
    public GameSessionPath gameSession() {
        if (_gameSession == null)
            _gameSession = new GameSessionPath(this, null, Keys.FK_GAME_SESSION_GAME_VERSION1.getInverseKey());

        return _gameSession;
    }

    @Override
    public GameVersion as(String alias) {
        return new GameVersion(DSL.name(alias), this);
    }

    @Override
    public GameVersion as(Name alias) {
        return new GameVersion(alias, this);
    }

    @Override
    public GameVersion as(Table<?> alias) {
        return new GameVersion(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public GameVersion rename(String name) {
        return new GameVersion(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public GameVersion rename(Name name) {
        return new GameVersion(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public GameVersion rename(Table<?> name) {
        return new GameVersion(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public GameVersion where(Condition condition) {
        return new GameVersion(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public GameVersion where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public GameVersion where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public GameVersion where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public GameVersion where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public GameVersion where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public GameVersion where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public GameVersion where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public GameVersion whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public GameVersion whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
