/*
 * This file is generated by jOOQ.
 */
package nl.gamedata.data.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import nl.gamedata.data.Gamedata;
import nl.gamedata.data.Indexes;
import nl.gamedata.data.Keys;
import nl.gamedata.data.tables.GameMission.GameMissionPath;
import nl.gamedata.data.tables.GroupObjective.GroupObjectivePath;
import nl.gamedata.data.tables.PlayerObjective.PlayerObjectivePath;
import nl.gamedata.data.tables.records.LearningGoalRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LearningGoal extends TableImpl<LearningGoalRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>gamedata.learning_goal</code>
     */
    public static final LearningGoal LEARNING_GOAL = new LearningGoal();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LearningGoalRecord> getRecordType() {
        return LearningGoalRecord.class;
    }

    /**
     * The column <code>gamedata.learning_goal.id</code>.
     */
    public final TableField<LearningGoalRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>gamedata.learning_goal.code</code>.
     */
    public final TableField<LearningGoalRecord, String> CODE = createField(DSL.name("code"), SQLDataType.VARCHAR(16).nullable(false), this, "");

    /**
     * The column <code>gamedata.learning_goal.name</code>.
     */
    public final TableField<LearningGoalRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>gamedata.learning_goal.description</code>.
     */
    public final TableField<LearningGoalRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>gamedata.learning_goal.game_mission_id</code>.
     */
    public final TableField<LearningGoalRecord, Integer> GAME_MISSION_ID = createField(DSL.name("game_mission_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private LearningGoal(Name alias, Table<LearningGoalRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private LearningGoal(Name alias, Table<LearningGoalRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>gamedata.learning_goal</code> table reference
     */
    public LearningGoal(String alias) {
        this(DSL.name(alias), LEARNING_GOAL);
    }

    /**
     * Create an aliased <code>gamedata.learning_goal</code> table reference
     */
    public LearningGoal(Name alias) {
        this(alias, LEARNING_GOAL);
    }

    /**
     * Create a <code>gamedata.learning_goal</code> table reference
     */
    public LearningGoal() {
        this(DSL.name("learning_goal"), null);
    }

    public <O extends Record> LearningGoal(Table<O> path, ForeignKey<O, LearningGoalRecord> childPath, InverseForeignKey<O, LearningGoalRecord> parentPath) {
        super(path, childPath, parentPath, LEARNING_GOAL);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class LearningGoalPath extends LearningGoal implements Path<LearningGoalRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> LearningGoalPath(Table<O> path, ForeignKey<O, LearningGoalRecord> childPath, InverseForeignKey<O, LearningGoalRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private LearningGoalPath(Name alias, Table<LearningGoalRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public LearningGoalPath as(String alias) {
            return new LearningGoalPath(DSL.name(alias), this);
        }

        @Override
        public LearningGoalPath as(Name alias) {
            return new LearningGoalPath(alias, this);
        }

        @Override
        public LearningGoalPath as(Table<?> alias) {
            return new LearningGoalPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Gamedata.GAMEDATA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.LEARNING_GOAL_FK_LEARNING_GOAL_GAME_MISSION1_IDX);
    }

    @Override
    public Identity<LearningGoalRecord, Integer> getIdentity() {
        return (Identity<LearningGoalRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<LearningGoalRecord> getPrimaryKey() {
        return Keys.KEY_LEARNING_GOAL_PRIMARY;
    }

    @Override
    public List<UniqueKey<LearningGoalRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_LEARNING_GOAL_ID_UNIQUE);
    }

    @Override
    public List<ForeignKey<LearningGoalRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_LEARNING_GOAL_GAME_MISSION1);
    }

    private transient GameMissionPath _gameMission;

    /**
     * Get the implicit join path to the <code>gamedata.game_mission</code>
     * table.
     */
    public GameMissionPath gameMission() {
        if (_gameMission == null)
            _gameMission = new GameMissionPath(this, Keys.FK_LEARNING_GOAL_GAME_MISSION1, null);

        return _gameMission;
    }

    private transient GroupObjectivePath _groupObjective;

    /**
     * Get the implicit to-many join path to the
     * <code>gamedata.group_objective</code> table
     */
    public GroupObjectivePath groupObjective() {
        if (_groupObjective == null)
            _groupObjective = new GroupObjectivePath(this, null, Keys.FK_GROUP_OBJECTIVE_LEARNING_GOAL1.getInverseKey());

        return _groupObjective;
    }

    private transient PlayerObjectivePath _playerObjective;

    /**
     * Get the implicit to-many join path to the
     * <code>gamedata.player_objective</code> table
     */
    public PlayerObjectivePath playerObjective() {
        if (_playerObjective == null)
            _playerObjective = new PlayerObjectivePath(this, null, Keys.FK_PLAYER_OBJECTIVE_LEARNING_GOAL1.getInverseKey());

        return _playerObjective;
    }

    @Override
    public LearningGoal as(String alias) {
        return new LearningGoal(DSL.name(alias), this);
    }

    @Override
    public LearningGoal as(Name alias) {
        return new LearningGoal(alias, this);
    }

    @Override
    public LearningGoal as(Table<?> alias) {
        return new LearningGoal(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public LearningGoal rename(String name) {
        return new LearningGoal(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public LearningGoal rename(Name name) {
        return new LearningGoal(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public LearningGoal rename(Table<?> name) {
        return new LearningGoal(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public LearningGoal where(Condition condition) {
        return new LearningGoal(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public LearningGoal where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public LearningGoal where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public LearningGoal where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public LearningGoal where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public LearningGoal where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public LearningGoal where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public LearningGoal where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public LearningGoal whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public LearningGoal whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
