/*
 * This file is generated by jOOQ.
 */
package nl.gamedata.data.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import nl.gamedata.data.Gamedata;
import nl.gamedata.data.Keys;
import nl.gamedata.data.tables.GameRole.GameRolePath;
import nl.gamedata.data.tables.GameToken.GameTokenPath;
import nl.gamedata.data.tables.GameVersion.GameVersionPath;
import nl.gamedata.data.tables.OrganizationGame.OrganizationGamePath;
import nl.gamedata.data.tables.Scale.ScalePath;
import nl.gamedata.data.tables.records.GameRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Game extends TableImpl<GameRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>gamedata.game</code>
     */
    public static final Game GAME = new Game();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GameRecord> getRecordType() {
        return GameRecord.class;
    }

    /**
     * The column <code>gamedata.game.id</code>.
     */
    public final TableField<GameRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>gamedata.game.code</code>.
     */
    public final TableField<GameRecord, String> CODE = createField(DSL.name("code"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>gamedata.game.name</code>.
     */
    public final TableField<GameRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>gamedata.game.description</code>.
     */
    public final TableField<GameRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>gamedata.game.token_forced</code>.
     */
    public final TableField<GameRecord, Byte> TOKEN_FORCED = createField(DSL.name("token_forced"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>gamedata.game.archived</code>.
     */
    public final TableField<GameRecord, Byte> ARCHIVED = createField(DSL.name("archived"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>gamedata.game.logo</code>.
     */
    public final TableField<GameRecord, byte[]> LOGO = createField(DSL.name("logo"), SQLDataType.BLOB.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.BLOB)), this, "");

    private Game(Name alias, Table<GameRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Game(Name alias, Table<GameRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>gamedata.game</code> table reference
     */
    public Game(String alias) {
        this(DSL.name(alias), GAME);
    }

    /**
     * Create an aliased <code>gamedata.game</code> table reference
     */
    public Game(Name alias) {
        this(alias, GAME);
    }

    /**
     * Create a <code>gamedata.game</code> table reference
     */
    public Game() {
        this(DSL.name("game"), null);
    }

    public <O extends Record> Game(Table<O> path, ForeignKey<O, GameRecord> childPath, InverseForeignKey<O, GameRecord> parentPath) {
        super(path, childPath, parentPath, GAME);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class GamePath extends Game implements Path<GameRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> GamePath(Table<O> path, ForeignKey<O, GameRecord> childPath, InverseForeignKey<O, GameRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private GamePath(Name alias, Table<GameRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public GamePath as(String alias) {
            return new GamePath(DSL.name(alias), this);
        }

        @Override
        public GamePath as(Name alias) {
            return new GamePath(alias, this);
        }

        @Override
        public GamePath as(Table<?> alias) {
            return new GamePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Gamedata.GAMEDATA;
    }

    @Override
    public Identity<GameRecord, Integer> getIdentity() {
        return (Identity<GameRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<GameRecord> getPrimaryKey() {
        return Keys.KEY_GAME_PRIMARY;
    }

    @Override
    public List<UniqueKey<GameRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_GAME_CODE_UNIQUE, Keys.KEY_GAME_ID_UNIQUE);
    }

    private transient GameRolePath _gameRole;

    /**
     * Get the implicit to-many join path to the <code>gamedata.game_role</code>
     * table
     */
    public GameRolePath gameRole() {
        if (_gameRole == null)
            _gameRole = new GameRolePath(this, null, Keys.FK_GAME_ROLE_GAME1.getInverseKey());

        return _gameRole;
    }

    private transient GameTokenPath _gameToken;

    /**
     * Get the implicit to-many join path to the
     * <code>gamedata.game_token</code> table
     */
    public GameTokenPath gameToken() {
        if (_gameToken == null)
            _gameToken = new GameTokenPath(this, null, Keys.FK_GAME_TOKEN_GAME1.getInverseKey());

        return _gameToken;
    }

    private transient GameVersionPath _gameVersion;

    /**
     * Get the implicit to-many join path to the
     * <code>gamedata.game_version</code> table
     */
    public GameVersionPath gameVersion() {
        if (_gameVersion == null)
            _gameVersion = new GameVersionPath(this, null, Keys.FK_GAME_VERSION_GAME1.getInverseKey());

        return _gameVersion;
    }

    private transient OrganizationGamePath _organizationGame;

    /**
     * Get the implicit to-many join path to the
     * <code>gamedata.organization_game</code> table
     */
    public OrganizationGamePath organizationGame() {
        if (_organizationGame == null)
            _organizationGame = new OrganizationGamePath(this, null, Keys.FK_ORGANIZATION_GAME_GAME1.getInverseKey());

        return _organizationGame;
    }

    private transient ScalePath _scale;

    /**
     * Get the implicit to-many join path to the <code>gamedata.scale</code>
     * table
     */
    public ScalePath scale() {
        if (_scale == null)
            _scale = new ScalePath(this, null, Keys.FK_SCALE_GAME1.getInverseKey());

        return _scale;
    }

    @Override
    public Game as(String alias) {
        return new Game(DSL.name(alias), this);
    }

    @Override
    public Game as(Name alias) {
        return new Game(alias, this);
    }

    @Override
    public Game as(Table<?> alias) {
        return new Game(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Game rename(String name) {
        return new Game(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Game rename(Name name) {
        return new Game(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Game rename(Table<?> name) {
        return new Game(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Game where(Condition condition) {
        return new Game(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Game where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Game where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Game where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Game where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Game where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Game where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Game where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Game whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Game whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
