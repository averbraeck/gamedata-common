/*
 * This file is generated by jOOQ.
 */
package nl.gamedata.data.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import nl.gamedata.data.Gamedata;
import nl.gamedata.data.Indexes;
import nl.gamedata.data.Keys;
import nl.gamedata.data.tables.OrganizationGame.OrganizationGamePath;
import nl.gamedata.data.tables.User.UserPath;
import nl.gamedata.data.tables.records.OrganizationGameRoleRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OrganizationGameRole extends TableImpl<OrganizationGameRoleRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>gamedata.organization_game_role</code>
     */
    public static final OrganizationGameRole ORGANIZATION_GAME_ROLE = new OrganizationGameRole();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OrganizationGameRoleRecord> getRecordType() {
        return OrganizationGameRoleRecord.class;
    }

    /**
     * The column <code>gamedata.organization_game_role.id</code>.
     */
    public final TableField<OrganizationGameRoleRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>gamedata.organization_game_role.view</code>.
     */
    public final TableField<OrganizationGameRoleRecord, Byte> VIEW = createField(DSL.name("view"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>gamedata.organization_game_role.edit</code>.
     */
    public final TableField<OrganizationGameRoleRecord, Byte> EDIT = createField(DSL.name("edit"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>gamedata.organization_game_role.user_id</code>.
     */
    public final TableField<OrganizationGameRoleRecord, Integer> USER_ID = createField(DSL.name("user_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column
     * <code>gamedata.organization_game_role.organization_game_id</code>.
     */
    public final TableField<OrganizationGameRoleRecord, Integer> ORGANIZATION_GAME_ID = createField(DSL.name("organization_game_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private OrganizationGameRole(Name alias, Table<OrganizationGameRoleRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private OrganizationGameRole(Name alias, Table<OrganizationGameRoleRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>gamedata.organization_game_role</code> table
     * reference
     */
    public OrganizationGameRole(String alias) {
        this(DSL.name(alias), ORGANIZATION_GAME_ROLE);
    }

    /**
     * Create an aliased <code>gamedata.organization_game_role</code> table
     * reference
     */
    public OrganizationGameRole(Name alias) {
        this(alias, ORGANIZATION_GAME_ROLE);
    }

    /**
     * Create a <code>gamedata.organization_game_role</code> table reference
     */
    public OrganizationGameRole() {
        this(DSL.name("organization_game_role"), null);
    }

    public <O extends Record> OrganizationGameRole(Table<O> path, ForeignKey<O, OrganizationGameRoleRecord> childPath, InverseForeignKey<O, OrganizationGameRoleRecord> parentPath) {
        super(path, childPath, parentPath, ORGANIZATION_GAME_ROLE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class OrganizationGameRolePath extends OrganizationGameRole implements Path<OrganizationGameRoleRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> OrganizationGameRolePath(Table<O> path, ForeignKey<O, OrganizationGameRoleRecord> childPath, InverseForeignKey<O, OrganizationGameRoleRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private OrganizationGameRolePath(Name alias, Table<OrganizationGameRoleRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public OrganizationGameRolePath as(String alias) {
            return new OrganizationGameRolePath(DSL.name(alias), this);
        }

        @Override
        public OrganizationGameRolePath as(Name alias) {
            return new OrganizationGameRolePath(alias, this);
        }

        @Override
        public OrganizationGameRolePath as(Table<?> alias) {
            return new OrganizationGameRolePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Gamedata.GAMEDATA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.ORGANIZATION_GAME_ROLE_FK_ORGANIZATION_GAME_ROLE_ORGANIZATION_GAME1_IDX, Indexes.ORGANIZATION_GAME_ROLE_FK_USER_ROLE_USER1_IDX);
    }

    @Override
    public Identity<OrganizationGameRoleRecord, Integer> getIdentity() {
        return (Identity<OrganizationGameRoleRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<OrganizationGameRoleRecord> getPrimaryKey() {
        return Keys.KEY_ORGANIZATION_GAME_ROLE_PRIMARY;
    }

    @Override
    public List<UniqueKey<OrganizationGameRoleRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_ORGANIZATION_GAME_ROLE_ID_UNIQUE);
    }

    @Override
    public List<ForeignKey<OrganizationGameRoleRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_ORGANIZATION_GAME_ROLE_ORGANIZATION_GAME1, Keys.FK_USER_ROLE_USER1);
    }

    private transient OrganizationGamePath _organizationGame;

    /**
     * Get the implicit join path to the <code>gamedata.organization_game</code>
     * table.
     */
    public OrganizationGamePath organizationGame() {
        if (_organizationGame == null)
            _organizationGame = new OrganizationGamePath(this, Keys.FK_ORGANIZATION_GAME_ROLE_ORGANIZATION_GAME1, null);

        return _organizationGame;
    }

    private transient UserPath _user;

    /**
     * Get the implicit join path to the <code>gamedata.user</code> table.
     */
    public UserPath user() {
        if (_user == null)
            _user = new UserPath(this, Keys.FK_USER_ROLE_USER1, null);

        return _user;
    }

    @Override
    public OrganizationGameRole as(String alias) {
        return new OrganizationGameRole(DSL.name(alias), this);
    }

    @Override
    public OrganizationGameRole as(Name alias) {
        return new OrganizationGameRole(alias, this);
    }

    @Override
    public OrganizationGameRole as(Table<?> alias) {
        return new OrganizationGameRole(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public OrganizationGameRole rename(String name) {
        return new OrganizationGameRole(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public OrganizationGameRole rename(Name name) {
        return new OrganizationGameRole(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public OrganizationGameRole rename(Table<?> name) {
        return new OrganizationGameRole(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public OrganizationGameRole where(Condition condition) {
        return new OrganizationGameRole(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public OrganizationGameRole where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public OrganizationGameRole where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public OrganizationGameRole where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public OrganizationGameRole where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public OrganizationGameRole where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public OrganizationGameRole where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public OrganizationGameRole where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public OrganizationGameRole whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public OrganizationGameRole whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
