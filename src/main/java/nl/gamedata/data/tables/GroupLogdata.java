/*
 * This file is generated by jOOQ.
 */
package nl.gamedata.data.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import nl.gamedata.data.Gamedata;
import nl.gamedata.data.Indexes;
import nl.gamedata.data.Keys;
import nl.gamedata.data.tables.records.GroupLogdataRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function7;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GroupLogdata extends TableImpl<GroupLogdataRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>gamedata.group_logdata</code>
     */
    public static final GroupLogdata GROUP_LOGDATA = new GroupLogdata();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GroupLogdataRecord> getRecordType() {
        return GroupLogdataRecord.class;
    }

    /**
     * The column <code>gamedata.group_logdata.id</code>.
     */
    public final TableField<GroupLogdataRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>gamedata.group_logdata.type</code>.
     */
    public final TableField<GroupLogdataRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>gamedata.group_logdata.key</code>.
     */
    public final TableField<GroupLogdataRecord, String> KEY = createField(DSL.name("key"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>gamedata.group_logdata.value</code>.
     */
    public final TableField<GroupLogdataRecord, String> VALUE = createField(DSL.name("value"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>gamedata.group_logdata.timestamp</code>.
     */
    public final TableField<GroupLogdataRecord, LocalDateTime> TIMESTAMP = createField(DSL.name("timestamp"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("current_timestamp()"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>gamedata.group_logdata.mission_attempt</code>.
     */
    public final TableField<GroupLogdataRecord, Integer> MISSION_ATTEMPT = createField(DSL.name("mission_attempt"), SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>gamedata.group_logdata.group_id</code>.
     */
    public final TableField<GroupLogdataRecord, Integer> GROUP_ID = createField(DSL.name("group_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private GroupLogdata(Name alias, Table<GroupLogdataRecord> aliased) {
        this(alias, aliased, null);
    }

    private GroupLogdata(Name alias, Table<GroupLogdataRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>gamedata.group_logdata</code> table reference
     */
    public GroupLogdata(String alias) {
        this(DSL.name(alias), GROUP_LOGDATA);
    }

    /**
     * Create an aliased <code>gamedata.group_logdata</code> table reference
     */
    public GroupLogdata(Name alias) {
        this(alias, GROUP_LOGDATA);
    }

    /**
     * Create a <code>gamedata.group_logdata</code> table reference
     */
    public GroupLogdata() {
        this(DSL.name("group_logdata"), null);
    }

    public <O extends Record> GroupLogdata(Table<O> child, ForeignKey<O, GroupLogdataRecord> key) {
        super(child, key, GROUP_LOGDATA);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Gamedata.GAMEDATA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.GROUP_LOGDATA_FK_GROUPLOGDATA_GROUP1_IDX);
    }

    @Override
    public Identity<GroupLogdataRecord, Integer> getIdentity() {
        return (Identity<GroupLogdataRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<GroupLogdataRecord> getPrimaryKey() {
        return Keys.KEY_GROUP_LOGDATA_PRIMARY;
    }

    @Override
    public List<UniqueKey<GroupLogdataRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_GROUP_LOGDATA_ID_UNIQUE);
    }

    @Override
    public List<ForeignKey<GroupLogdataRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_GROUPLOGDATA_GROUP1);
    }

    private transient Group _group;

    /**
     * Get the implicit join path to the <code>gamedata.group</code> table.
     */
    public Group group() {
        if (_group == null)
            _group = new Group(this, Keys.FK_GROUPLOGDATA_GROUP1);

        return _group;
    }

    @Override
    public GroupLogdata as(String alias) {
        return new GroupLogdata(DSL.name(alias), this);
    }

    @Override
    public GroupLogdata as(Name alias) {
        return new GroupLogdata(alias, this);
    }

    @Override
    public GroupLogdata as(Table<?> alias) {
        return new GroupLogdata(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public GroupLogdata rename(String name) {
        return new GroupLogdata(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public GroupLogdata rename(Name name) {
        return new GroupLogdata(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public GroupLogdata rename(Table<?> name) {
        return new GroupLogdata(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, String, String, String, LocalDateTime, Integer, Integer> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function7<? super Integer, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function7<? super Integer, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
