/*
 * This file is generated by jOOQ.
 */
package nl.gamedata.data.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import nl.gamedata.data.Gamedata;
import nl.gamedata.data.Indexes;
import nl.gamedata.data.Keys;
import nl.gamedata.data.tables.GameSession.GameSessionPath;
import nl.gamedata.data.tables.User.UserPath;
import nl.gamedata.data.tables.records.GameSessionRoleRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GameSessionRole extends TableImpl<GameSessionRoleRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>gamedata.game_session_role</code>
     */
    public static final GameSessionRole GAME_SESSION_ROLE = new GameSessionRole();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GameSessionRoleRecord> getRecordType() {
        return GameSessionRoleRecord.class;
    }

    /**
     * The column <code>gamedata.game_session_role.id</code>.
     */
    public final TableField<GameSessionRoleRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>gamedata.game_session_role.view</code>.
     */
    public final TableField<GameSessionRoleRecord, Byte> VIEW = createField(DSL.name("view"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>gamedata.game_session_role.edit</code>.
     */
    public final TableField<GameSessionRoleRecord, Byte> EDIT = createField(DSL.name("edit"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>gamedata.game_session_role.user_id</code>.
     */
    public final TableField<GameSessionRoleRecord, Integer> USER_ID = createField(DSL.name("user_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>gamedata.game_session_role.game_session_id</code>.
     */
    public final TableField<GameSessionRoleRecord, Integer> GAME_SESSION_ID = createField(DSL.name("game_session_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private GameSessionRole(Name alias, Table<GameSessionRoleRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private GameSessionRole(Name alias, Table<GameSessionRoleRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>gamedata.game_session_role</code> table reference
     */
    public GameSessionRole(String alias) {
        this(DSL.name(alias), GAME_SESSION_ROLE);
    }

    /**
     * Create an aliased <code>gamedata.game_session_role</code> table reference
     */
    public GameSessionRole(Name alias) {
        this(alias, GAME_SESSION_ROLE);
    }

    /**
     * Create a <code>gamedata.game_session_role</code> table reference
     */
    public GameSessionRole() {
        this(DSL.name("game_session_role"), null);
    }

    public <O extends Record> GameSessionRole(Table<O> path, ForeignKey<O, GameSessionRoleRecord> childPath, InverseForeignKey<O, GameSessionRoleRecord> parentPath) {
        super(path, childPath, parentPath, GAME_SESSION_ROLE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class GameSessionRolePath extends GameSessionRole implements Path<GameSessionRoleRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> GameSessionRolePath(Table<O> path, ForeignKey<O, GameSessionRoleRecord> childPath, InverseForeignKey<O, GameSessionRoleRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private GameSessionRolePath(Name alias, Table<GameSessionRoleRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public GameSessionRolePath as(String alias) {
            return new GameSessionRolePath(DSL.name(alias), this);
        }

        @Override
        public GameSessionRolePath as(Name alias) {
            return new GameSessionRolePath(alias, this);
        }

        @Override
        public GameSessionRolePath as(Table<?> alias) {
            return new GameSessionRolePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Gamedata.GAMEDATA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.GAME_SESSION_ROLE_FK_GAME_SESSION_ROLE_GAME_SESSION1_IDX, Indexes.GAME_SESSION_ROLE_FK_GAME_SESSION_ROLE_USER1_IDX);
    }

    @Override
    public Identity<GameSessionRoleRecord, Integer> getIdentity() {
        return (Identity<GameSessionRoleRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<GameSessionRoleRecord> getPrimaryKey() {
        return Keys.KEY_GAME_SESSION_ROLE_PRIMARY;
    }

    @Override
    public List<UniqueKey<GameSessionRoleRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_GAME_SESSION_ROLE_ID_UNIQUE);
    }

    @Override
    public List<ForeignKey<GameSessionRoleRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_GAME_SESSION_ROLE_GAME_SESSION1, Keys.FK_GAME_SESSION_ROLE_USER1);
    }

    private transient GameSessionPath _gameSession;

    /**
     * Get the implicit join path to the <code>gamedata.game_session</code>
     * table.
     */
    public GameSessionPath gameSession() {
        if (_gameSession == null)
            _gameSession = new GameSessionPath(this, Keys.FK_GAME_SESSION_ROLE_GAME_SESSION1, null);

        return _gameSession;
    }

    private transient UserPath _user;

    /**
     * Get the implicit join path to the <code>gamedata.user</code> table.
     */
    public UserPath user() {
        if (_user == null)
            _user = new UserPath(this, Keys.FK_GAME_SESSION_ROLE_USER1, null);

        return _user;
    }

    @Override
    public GameSessionRole as(String alias) {
        return new GameSessionRole(DSL.name(alias), this);
    }

    @Override
    public GameSessionRole as(Name alias) {
        return new GameSessionRole(alias, this);
    }

    @Override
    public GameSessionRole as(Table<?> alias) {
        return new GameSessionRole(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public GameSessionRole rename(String name) {
        return new GameSessionRole(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public GameSessionRole rename(Name name) {
        return new GameSessionRole(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public GameSessionRole rename(Table<?> name) {
        return new GameSessionRole(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public GameSessionRole where(Condition condition) {
        return new GameSessionRole(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public GameSessionRole where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public GameSessionRole where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public GameSessionRole where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public GameSessionRole where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public GameSessionRole where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public GameSessionRole where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public GameSessionRole where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public GameSessionRole whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public GameSessionRole whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
