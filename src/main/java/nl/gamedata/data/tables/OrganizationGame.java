/*
 * This file is generated by jOOQ.
 */
package nl.gamedata.data.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import nl.gamedata.data.Gamedata;
import nl.gamedata.data.Indexes;
import nl.gamedata.data.Keys;
import nl.gamedata.data.tables.DashboardTemplate.DashboardTemplatePath;
import nl.gamedata.data.tables.Game.GamePath;
import nl.gamedata.data.tables.Organization.OrganizationPath;
import nl.gamedata.data.tables.OrganizationGameRole.OrganizationGameRolePath;
import nl.gamedata.data.tables.OrganizationGameToken.OrganizationGameTokenPath;
import nl.gamedata.data.tables.records.OrganizationGameRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OrganizationGame extends TableImpl<OrganizationGameRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>gamedata.organization_game</code>
     */
    public static final OrganizationGame ORGANIZATION_GAME = new OrganizationGame();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OrganizationGameRecord> getRecordType() {
        return OrganizationGameRecord.class;
    }

    /**
     * The column <code>gamedata.organization_game.id</code>.
     */
    public final TableField<OrganizationGameRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>gamedata.organization_game.name</code>.
     */
    public final TableField<OrganizationGameRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>gamedata.organization_game.token_forced</code>.
     */
    public final TableField<OrganizationGameRecord, Byte> TOKEN_FORCED = createField(DSL.name("token_forced"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>gamedata.organization_game.anonymous_sessions</code>.
     */
    public final TableField<OrganizationGameRecord, Byte> ANONYMOUS_SESSIONS = createField(DSL.name("anonymous_sessions"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>gamedata.organization_game.organization_id</code>.
     */
    public final TableField<OrganizationGameRecord, Integer> ORGANIZATION_ID = createField(DSL.name("organization_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>gamedata.organization_game.game_id</code>.
     */
    public final TableField<OrganizationGameRecord, Integer> GAME_ID = createField(DSL.name("game_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private OrganizationGame(Name alias, Table<OrganizationGameRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private OrganizationGame(Name alias, Table<OrganizationGameRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>gamedata.organization_game</code> table reference
     */
    public OrganizationGame(String alias) {
        this(DSL.name(alias), ORGANIZATION_GAME);
    }

    /**
     * Create an aliased <code>gamedata.organization_game</code> table reference
     */
    public OrganizationGame(Name alias) {
        this(alias, ORGANIZATION_GAME);
    }

    /**
     * Create a <code>gamedata.organization_game</code> table reference
     */
    public OrganizationGame() {
        this(DSL.name("organization_game"), null);
    }

    public <O extends Record> OrganizationGame(Table<O> path, ForeignKey<O, OrganizationGameRecord> childPath, InverseForeignKey<O, OrganizationGameRecord> parentPath) {
        super(path, childPath, parentPath, ORGANIZATION_GAME);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class OrganizationGamePath extends OrganizationGame implements Path<OrganizationGameRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> OrganizationGamePath(Table<O> path, ForeignKey<O, OrganizationGameRecord> childPath, InverseForeignKey<O, OrganizationGameRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private OrganizationGamePath(Name alias, Table<OrganizationGameRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public OrganizationGamePath as(String alias) {
            return new OrganizationGamePath(DSL.name(alias), this);
        }

        @Override
        public OrganizationGamePath as(Name alias) {
            return new OrganizationGamePath(alias, this);
        }

        @Override
        public OrganizationGamePath as(Table<?> alias) {
            return new OrganizationGamePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Gamedata.GAMEDATA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.ORGANIZATION_GAME_FK_ORGANIZATION_GAME_GAME1_IDX, Indexes.ORGANIZATION_GAME_FK_ORGANIZATION_GAME_ORGANIZATION1_IDX);
    }

    @Override
    public Identity<OrganizationGameRecord, Integer> getIdentity() {
        return (Identity<OrganizationGameRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<OrganizationGameRecord> getPrimaryKey() {
        return Keys.KEY_ORGANIZATION_GAME_PRIMARY;
    }

    @Override
    public List<UniqueKey<OrganizationGameRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_ORGANIZATION_GAME_ID_UNIQUE);
    }

    @Override
    public List<ForeignKey<OrganizationGameRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_ORGANIZATION_GAME_GAME1, Keys.FK_ORGANIZATION_GAME_ORGANIZATION1);
    }

    private transient GamePath _game;

    /**
     * Get the implicit join path to the <code>gamedata.game</code> table.
     */
    public GamePath game() {
        if (_game == null)
            _game = new GamePath(this, Keys.FK_ORGANIZATION_GAME_GAME1, null);

        return _game;
    }

    private transient OrganizationPath _organization;

    /**
     * Get the implicit join path to the <code>gamedata.organization</code>
     * table.
     */
    public OrganizationPath organization() {
        if (_organization == null)
            _organization = new OrganizationPath(this, Keys.FK_ORGANIZATION_GAME_ORGANIZATION1, null);

        return _organization;
    }

    private transient DashboardTemplatePath _dashboardTemplate;

    /**
     * Get the implicit to-many join path to the
     * <code>gamedata.dashboard_template</code> table
     */
    public DashboardTemplatePath dashboardTemplate() {
        if (_dashboardTemplate == null)
            _dashboardTemplate = new DashboardTemplatePath(this, null, Keys.FK_DASHBOARD_TEMPLATE_ORGANIZATION_GAME1.getInverseKey());

        return _dashboardTemplate;
    }

    private transient OrganizationGameRolePath _organizationGameRole;

    /**
     * Get the implicit to-many join path to the
     * <code>gamedata.organization_game_role</code> table
     */
    public OrganizationGameRolePath organizationGameRole() {
        if (_organizationGameRole == null)
            _organizationGameRole = new OrganizationGameRolePath(this, null, Keys.FK_ORGANIZATION_GAME_ROLE_ORGANIZATION_GAME1.getInverseKey());

        return _organizationGameRole;
    }

    private transient OrganizationGameTokenPath _organizationGameToken;

    /**
     * Get the implicit to-many join path to the
     * <code>gamedata.organization_game_token</code> table
     */
    public OrganizationGameTokenPath organizationGameToken() {
        if (_organizationGameToken == null)
            _organizationGameToken = new OrganizationGameTokenPath(this, null, Keys.FK_ORGANIZATION_GAME_TOKEN_ORGANIZATION_GAME1.getInverseKey());

        return _organizationGameToken;
    }

    @Override
    public OrganizationGame as(String alias) {
        return new OrganizationGame(DSL.name(alias), this);
    }

    @Override
    public OrganizationGame as(Name alias) {
        return new OrganizationGame(alias, this);
    }

    @Override
    public OrganizationGame as(Table<?> alias) {
        return new OrganizationGame(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public OrganizationGame rename(String name) {
        return new OrganizationGame(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public OrganizationGame rename(Name name) {
        return new OrganizationGame(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public OrganizationGame rename(Table<?> name) {
        return new OrganizationGame(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public OrganizationGame where(Condition condition) {
        return new OrganizationGame(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public OrganizationGame where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public OrganizationGame where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public OrganizationGame where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public OrganizationGame where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public OrganizationGame where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public OrganizationGame where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public OrganizationGame where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public OrganizationGame whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public OrganizationGame whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
