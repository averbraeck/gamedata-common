/*
 * This file is generated by jOOQ.
 */
package nl.gamedata.data.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import nl.gamedata.data.Gamedata;
import nl.gamedata.data.Indexes;
import nl.gamedata.data.Keys;
import nl.gamedata.data.tables.Dashboard.DashboardPath;
import nl.gamedata.data.tables.DashboardLayout.DashboardLayoutPath;
import nl.gamedata.data.tables.DashboardRole.DashboardRolePath;
import nl.gamedata.data.tables.GameMission.GameMissionPath;
import nl.gamedata.data.tables.GameVersion.GameVersionPath;
import nl.gamedata.data.tables.OrganizationGame.OrganizationGamePath;
import nl.gamedata.data.tables.TemplateElement.TemplateElementPath;
import nl.gamedata.data.tables.records.DashboardTemplateRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DashboardTemplate extends TableImpl<DashboardTemplateRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>gamedata.dashboard_template</code>
     */
    public static final DashboardTemplate DASHBOARD_TEMPLATE = new DashboardTemplate();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DashboardTemplateRecord> getRecordType() {
        return DashboardTemplateRecord.class;
    }

    /**
     * The column <code>gamedata.dashboard_template.id</code>.
     */
    public final TableField<DashboardTemplateRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>gamedata.dashboard_template.code</code>.
     */
    public final TableField<DashboardTemplateRecord, String> CODE = createField(DSL.name("code"), SQLDataType.VARCHAR(16).nullable(false), this, "");

    /**
     * The column <code>gamedata.dashboard_template.name</code>.
     */
    public final TableField<DashboardTemplateRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>gamedata.dashboard_template.description</code>.
     */
    public final TableField<DashboardTemplateRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>gamedata.dashboard_template.private</code>.
     */
    public final TableField<DashboardTemplateRecord, Byte> PRIVATE = createField(DSL.name("private"), SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>gamedata.dashboard_template.game_version_id</code>.
     */
    public final TableField<DashboardTemplateRecord, Integer> GAME_VERSION_ID = createField(DSL.name("game_version_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>gamedata.dashboard_template.game_mission_id</code>.
     */
    public final TableField<DashboardTemplateRecord, Integer> GAME_MISSION_ID = createField(DSL.name("game_mission_id"), SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>gamedata.dashboard_template.organization_game_id</code>.
     */
    public final TableField<DashboardTemplateRecord, Integer> ORGANIZATION_GAME_ID = createField(DSL.name("organization_game_id"), SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>gamedata.dashboard_template.dashboard_layout_id</code>.
     */
    public final TableField<DashboardTemplateRecord, Integer> DASHBOARD_LAYOUT_ID = createField(DSL.name("dashboard_layout_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private DashboardTemplate(Name alias, Table<DashboardTemplateRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private DashboardTemplate(Name alias, Table<DashboardTemplateRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>gamedata.dashboard_template</code> table
     * reference
     */
    public DashboardTemplate(String alias) {
        this(DSL.name(alias), DASHBOARD_TEMPLATE);
    }

    /**
     * Create an aliased <code>gamedata.dashboard_template</code> table
     * reference
     */
    public DashboardTemplate(Name alias) {
        this(alias, DASHBOARD_TEMPLATE);
    }

    /**
     * Create a <code>gamedata.dashboard_template</code> table reference
     */
    public DashboardTemplate() {
        this(DSL.name("dashboard_template"), null);
    }

    public <O extends Record> DashboardTemplate(Table<O> path, ForeignKey<O, DashboardTemplateRecord> childPath, InverseForeignKey<O, DashboardTemplateRecord> parentPath) {
        super(path, childPath, parentPath, DASHBOARD_TEMPLATE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class DashboardTemplatePath extends DashboardTemplate implements Path<DashboardTemplateRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> DashboardTemplatePath(Table<O> path, ForeignKey<O, DashboardTemplateRecord> childPath, InverseForeignKey<O, DashboardTemplateRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private DashboardTemplatePath(Name alias, Table<DashboardTemplateRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public DashboardTemplatePath as(String alias) {
            return new DashboardTemplatePath(DSL.name(alias), this);
        }

        @Override
        public DashboardTemplatePath as(Name alias) {
            return new DashboardTemplatePath(alias, this);
        }

        @Override
        public DashboardTemplatePath as(Table<?> alias) {
            return new DashboardTemplatePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Gamedata.GAMEDATA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.DASHBOARD_TEMPLATE_FK_DASHBOARD_TEMPLATE_DASHBOARD_LAYOUT1_IDX, Indexes.DASHBOARD_TEMPLATE_FK_DASHBOARD_TEMPLATE_GAME_VERSION1_IDX, Indexes.DASHBOARD_TEMPLATE_FK_DASHBOARD_TEMPLATE_ORGANIZATION_GAME1_IDX, Indexes.DASHBOARD_TEMPLATE_FK_PRIVATE_DASHBOARD_GAME_MISSION1_IDX);
    }

    @Override
    public Identity<DashboardTemplateRecord, Integer> getIdentity() {
        return (Identity<DashboardTemplateRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<DashboardTemplateRecord> getPrimaryKey() {
        return Keys.KEY_DASHBOARD_TEMPLATE_PRIMARY;
    }

    @Override
    public List<UniqueKey<DashboardTemplateRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_DASHBOARD_TEMPLATE_ID_UNIQUE);
    }

    @Override
    public List<ForeignKey<DashboardTemplateRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_DASHBOARD_TEMPLATE_DASHBOARD_LAYOUT1, Keys.FK_DASHBOARD_TEMPLATE_GAME_VERSION1, Keys.FK_DASHBOARD_TEMPLATE_ORGANIZATION_GAME1, Keys.FK_PRIVATE_DASHBOARD_GAME_MISSION1);
    }

    private transient DashboardLayoutPath _dashboardLayout;

    /**
     * Get the implicit join path to the <code>gamedata.dashboard_layout</code>
     * table.
     */
    public DashboardLayoutPath dashboardLayout() {
        if (_dashboardLayout == null)
            _dashboardLayout = new DashboardLayoutPath(this, Keys.FK_DASHBOARD_TEMPLATE_DASHBOARD_LAYOUT1, null);

        return _dashboardLayout;
    }

    private transient GameVersionPath _gameVersion;

    /**
     * Get the implicit join path to the <code>gamedata.game_version</code>
     * table.
     */
    public GameVersionPath gameVersion() {
        if (_gameVersion == null)
            _gameVersion = new GameVersionPath(this, Keys.FK_DASHBOARD_TEMPLATE_GAME_VERSION1, null);

        return _gameVersion;
    }

    private transient OrganizationGamePath _organizationGame;

    /**
     * Get the implicit join path to the <code>gamedata.organization_game</code>
     * table.
     */
    public OrganizationGamePath organizationGame() {
        if (_organizationGame == null)
            _organizationGame = new OrganizationGamePath(this, Keys.FK_DASHBOARD_TEMPLATE_ORGANIZATION_GAME1, null);

        return _organizationGame;
    }

    private transient GameMissionPath _gameMission;

    /**
     * Get the implicit join path to the <code>gamedata.game_mission</code>
     * table.
     */
    public GameMissionPath gameMission() {
        if (_gameMission == null)
            _gameMission = new GameMissionPath(this, Keys.FK_PRIVATE_DASHBOARD_GAME_MISSION1, null);

        return _gameMission;
    }

    private transient DashboardPath _dashboard;

    /**
     * Get the implicit to-many join path to the <code>gamedata.dashboard</code>
     * table
     */
    public DashboardPath dashboard() {
        if (_dashboard == null)
            _dashboard = new DashboardPath(this, null, Keys.FK_DASHBOARD_DASHBOARD_TEMPLATE1.getInverseKey());

        return _dashboard;
    }

    private transient DashboardRolePath _dashboardRole;

    /**
     * Get the implicit to-many join path to the
     * <code>gamedata.dashboard_role</code> table
     */
    public DashboardRolePath dashboardRole() {
        if (_dashboardRole == null)
            _dashboardRole = new DashboardRolePath(this, null, Keys.FK_DASHBOARD_ROLE_DASHBOARD_TEMPLATE1.getInverseKey());

        return _dashboardRole;
    }

    private transient TemplateElementPath _templateElement;

    /**
     * Get the implicit to-many join path to the
     * <code>gamedata.template_element</code> table
     */
    public TemplateElementPath templateElement() {
        if (_templateElement == null)
            _templateElement = new TemplateElementPath(this, null, Keys.FK_TEMPLATE_ELEMENT_DASHBOARD_TEMPLATE1.getInverseKey());

        return _templateElement;
    }

    @Override
    public DashboardTemplate as(String alias) {
        return new DashboardTemplate(DSL.name(alias), this);
    }

    @Override
    public DashboardTemplate as(Name alias) {
        return new DashboardTemplate(alias, this);
    }

    @Override
    public DashboardTemplate as(Table<?> alias) {
        return new DashboardTemplate(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public DashboardTemplate rename(String name) {
        return new DashboardTemplate(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DashboardTemplate rename(Name name) {
        return new DashboardTemplate(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public DashboardTemplate rename(Table<?> name) {
        return new DashboardTemplate(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DashboardTemplate where(Condition condition) {
        return new DashboardTemplate(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DashboardTemplate where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DashboardTemplate where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DashboardTemplate where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DashboardTemplate where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DashboardTemplate where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DashboardTemplate where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DashboardTemplate where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DashboardTemplate whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DashboardTemplate whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
