/*
 * This file is generated by jOOQ.
 */
package nl.gamedata.data.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import nl.gamedata.data.Gamedata;
import nl.gamedata.data.Indexes;
import nl.gamedata.data.Keys;
import nl.gamedata.data.tables.records.PropertyValueRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PropertyValue extends TableImpl<PropertyValueRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>gamedata.property_value</code>
     */
    public static final PropertyValue PROPERTY_VALUE = new PropertyValue();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PropertyValueRecord> getRecordType() {
        return PropertyValueRecord.class;
    }

    /**
     * The column <code>gamedata.property_value.id</code>.
     */
    public final TableField<PropertyValueRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>gamedata.property_value.value</code>.
     */
    public final TableField<PropertyValueRecord, String> VALUE = createField(DSL.name("value"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>gamedata.property_value.element_property_id</code>.
     */
    public final TableField<PropertyValueRecord, Integer> ELEMENT_PROPERTY_ID = createField(DSL.name("element_property_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>gamedata.property_value.template_element_id</code>.
     */
    public final TableField<PropertyValueRecord, Integer> TEMPLATE_ELEMENT_ID = createField(DSL.name("template_element_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private PropertyValue(Name alias, Table<PropertyValueRecord> aliased) {
        this(alias, aliased, null);
    }

    private PropertyValue(Name alias, Table<PropertyValueRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>gamedata.property_value</code> table reference
     */
    public PropertyValue(String alias) {
        this(DSL.name(alias), PROPERTY_VALUE);
    }

    /**
     * Create an aliased <code>gamedata.property_value</code> table reference
     */
    public PropertyValue(Name alias) {
        this(alias, PROPERTY_VALUE);
    }

    /**
     * Create a <code>gamedata.property_value</code> table reference
     */
    public PropertyValue() {
        this(DSL.name("property_value"), null);
    }

    public <O extends Record> PropertyValue(Table<O> child, ForeignKey<O, PropertyValueRecord> key) {
        super(child, key, PROPERTY_VALUE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Gamedata.GAMEDATA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.PROPERTY_VALUE_FK_PROPERTY_VALUE_ELEMENT_PROPERTY1_IDX, Indexes.PROPERTY_VALUE_FK_PROPERTY_VALUE_TEMPLATE_ELEMENT1_IDX);
    }

    @Override
    public Identity<PropertyValueRecord, Integer> getIdentity() {
        return (Identity<PropertyValueRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<PropertyValueRecord> getPrimaryKey() {
        return Keys.KEY_PROPERTY_VALUE_PRIMARY;
    }

    @Override
    public List<UniqueKey<PropertyValueRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_PROPERTY_VALUE_ID_UNIQUE);
    }

    @Override
    public List<ForeignKey<PropertyValueRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_PROPERTY_VALUE_ELEMENT_PROPERTY1, Keys.FK_PROPERTY_VALUE_TEMPLATE_ELEMENT1);
    }

    private transient ElementProperty _elementProperty;
    private transient TemplateElement _templateElement;

    /**
     * Get the implicit join path to the <code>gamedata.element_property</code>
     * table.
     */
    public ElementProperty elementProperty() {
        if (_elementProperty == null)
            _elementProperty = new ElementProperty(this, Keys.FK_PROPERTY_VALUE_ELEMENT_PROPERTY1);

        return _elementProperty;
    }

    /**
     * Get the implicit join path to the <code>gamedata.template_element</code>
     * table.
     */
    public TemplateElement templateElement() {
        if (_templateElement == null)
            _templateElement = new TemplateElement(this, Keys.FK_PROPERTY_VALUE_TEMPLATE_ELEMENT1);

        return _templateElement;
    }

    @Override
    public PropertyValue as(String alias) {
        return new PropertyValue(DSL.name(alias), this);
    }

    @Override
    public PropertyValue as(Name alias) {
        return new PropertyValue(alias, this);
    }

    @Override
    public PropertyValue as(Table<?> alias) {
        return new PropertyValue(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PropertyValue rename(String name) {
        return new PropertyValue(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PropertyValue rename(Name name) {
        return new PropertyValue(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PropertyValue rename(Table<?> name) {
        return new PropertyValue(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, Integer, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Integer, ? super String, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Integer, ? super String, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
