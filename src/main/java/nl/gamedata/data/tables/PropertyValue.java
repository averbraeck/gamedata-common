/*
 * This file is generated by jOOQ.
 */
package nl.gamedata.data.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import nl.gamedata.data.Gamedata;
import nl.gamedata.data.Indexes;
import nl.gamedata.data.Keys;
import nl.gamedata.data.tables.ElementProperty.ElementPropertyPath;
import nl.gamedata.data.tables.TemplateElement.TemplateElementPath;
import nl.gamedata.data.tables.records.PropertyValueRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PropertyValue extends TableImpl<PropertyValueRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>gamedata.property_value</code>
     */
    public static final PropertyValue PROPERTY_VALUE = new PropertyValue();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PropertyValueRecord> getRecordType() {
        return PropertyValueRecord.class;
    }

    /**
     * The column <code>gamedata.property_value.id</code>.
     */
    public final TableField<PropertyValueRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>gamedata.property_value.value</code>.
     */
    public final TableField<PropertyValueRecord, String> VALUE = createField(DSL.name("value"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>gamedata.property_value.element_property_id</code>.
     */
    public final TableField<PropertyValueRecord, Integer> ELEMENT_PROPERTY_ID = createField(DSL.name("element_property_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>gamedata.property_value.template_element_id</code>.
     */
    public final TableField<PropertyValueRecord, Integer> TEMPLATE_ELEMENT_ID = createField(DSL.name("template_element_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private PropertyValue(Name alias, Table<PropertyValueRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private PropertyValue(Name alias, Table<PropertyValueRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>gamedata.property_value</code> table reference
     */
    public PropertyValue(String alias) {
        this(DSL.name(alias), PROPERTY_VALUE);
    }

    /**
     * Create an aliased <code>gamedata.property_value</code> table reference
     */
    public PropertyValue(Name alias) {
        this(alias, PROPERTY_VALUE);
    }

    /**
     * Create a <code>gamedata.property_value</code> table reference
     */
    public PropertyValue() {
        this(DSL.name("property_value"), null);
    }

    public <O extends Record> PropertyValue(Table<O> path, ForeignKey<O, PropertyValueRecord> childPath, InverseForeignKey<O, PropertyValueRecord> parentPath) {
        super(path, childPath, parentPath, PROPERTY_VALUE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class PropertyValuePath extends PropertyValue implements Path<PropertyValueRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> PropertyValuePath(Table<O> path, ForeignKey<O, PropertyValueRecord> childPath, InverseForeignKey<O, PropertyValueRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private PropertyValuePath(Name alias, Table<PropertyValueRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public PropertyValuePath as(String alias) {
            return new PropertyValuePath(DSL.name(alias), this);
        }

        @Override
        public PropertyValuePath as(Name alias) {
            return new PropertyValuePath(alias, this);
        }

        @Override
        public PropertyValuePath as(Table<?> alias) {
            return new PropertyValuePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Gamedata.GAMEDATA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.PROPERTY_VALUE_FK_PROPERTY_VALUE_ELEMENT_PROPERTY1_IDX, Indexes.PROPERTY_VALUE_FK_PROPERTY_VALUE_TEMPLATE_ELEMENT1_IDX);
    }

    @Override
    public Identity<PropertyValueRecord, Integer> getIdentity() {
        return (Identity<PropertyValueRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<PropertyValueRecord> getPrimaryKey() {
        return Keys.KEY_PROPERTY_VALUE_PRIMARY;
    }

    @Override
    public List<UniqueKey<PropertyValueRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_PROPERTY_VALUE_ID_UNIQUE);
    }

    @Override
    public List<ForeignKey<PropertyValueRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_PROPERTY_VALUE_ELEMENT_PROPERTY1, Keys.FK_PROPERTY_VALUE_TEMPLATE_ELEMENT1);
    }

    private transient ElementPropertyPath _elementProperty;

    /**
     * Get the implicit join path to the <code>gamedata.element_property</code>
     * table.
     */
    public ElementPropertyPath elementProperty() {
        if (_elementProperty == null)
            _elementProperty = new ElementPropertyPath(this, Keys.FK_PROPERTY_VALUE_ELEMENT_PROPERTY1, null);

        return _elementProperty;
    }

    private transient TemplateElementPath _templateElement;

    /**
     * Get the implicit join path to the <code>gamedata.template_element</code>
     * table.
     */
    public TemplateElementPath templateElement() {
        if (_templateElement == null)
            _templateElement = new TemplateElementPath(this, Keys.FK_PROPERTY_VALUE_TEMPLATE_ELEMENT1, null);

        return _templateElement;
    }

    @Override
    public PropertyValue as(String alias) {
        return new PropertyValue(DSL.name(alias), this);
    }

    @Override
    public PropertyValue as(Name alias) {
        return new PropertyValue(alias, this);
    }

    @Override
    public PropertyValue as(Table<?> alias) {
        return new PropertyValue(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PropertyValue rename(String name) {
        return new PropertyValue(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PropertyValue rename(Name name) {
        return new PropertyValue(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PropertyValue rename(Table<?> name) {
        return new PropertyValue(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PropertyValue where(Condition condition) {
        return new PropertyValue(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PropertyValue where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PropertyValue where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PropertyValue where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PropertyValue where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PropertyValue where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PropertyValue where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PropertyValue where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PropertyValue whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PropertyValue whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
