/*
 * This file is generated by jOOQ.
 */
package nl.gamedata.data.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import nl.gamedata.data.Gamedata;
import nl.gamedata.data.Indexes;
import nl.gamedata.data.Keys;
import nl.gamedata.data.tables.DashboardTemplate.DashboardTemplatePath;
import nl.gamedata.data.tables.GameVersion.GameVersionPath;
import nl.gamedata.data.tables.GroupAttempt.GroupAttemptPath;
import nl.gamedata.data.tables.LearningGoal.LearningGoalPath;
import nl.gamedata.data.tables.MissionEvent.MissionEventPath;
import nl.gamedata.data.tables.PlayerAttempt.PlayerAttemptPath;
import nl.gamedata.data.tables.records.GameMissionRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GameMission extends TableImpl<GameMissionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>gamedata.game_mission</code>
     */
    public static final GameMission GAME_MISSION = new GameMission();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GameMissionRecord> getRecordType() {
        return GameMissionRecord.class;
    }

    /**
     * The column <code>gamedata.game_mission.id</code>.
     */
    public final TableField<GameMissionRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>gamedata.game_mission.code</code>.
     */
    public final TableField<GameMissionRecord, String> CODE = createField(DSL.name("code"), SQLDataType.VARCHAR(16).nullable(false), this, "");

    /**
     * The column <code>gamedata.game_mission.name</code>.
     */
    public final TableField<GameMissionRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>gamedata.game_mission.description</code>.
     */
    public final TableField<GameMissionRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>gamedata.game_mission.game_version_id</code>.
     */
    public final TableField<GameMissionRecord, Integer> GAME_VERSION_ID = createField(DSL.name("game_version_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private GameMission(Name alias, Table<GameMissionRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private GameMission(Name alias, Table<GameMissionRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>gamedata.game_mission</code> table reference
     */
    public GameMission(String alias) {
        this(DSL.name(alias), GAME_MISSION);
    }

    /**
     * Create an aliased <code>gamedata.game_mission</code> table reference
     */
    public GameMission(Name alias) {
        this(alias, GAME_MISSION);
    }

    /**
     * Create a <code>gamedata.game_mission</code> table reference
     */
    public GameMission() {
        this(DSL.name("game_mission"), null);
    }

    public <O extends Record> GameMission(Table<O> path, ForeignKey<O, GameMissionRecord> childPath, InverseForeignKey<O, GameMissionRecord> parentPath) {
        super(path, childPath, parentPath, GAME_MISSION);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class GameMissionPath extends GameMission implements Path<GameMissionRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> GameMissionPath(Table<O> path, ForeignKey<O, GameMissionRecord> childPath, InverseForeignKey<O, GameMissionRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private GameMissionPath(Name alias, Table<GameMissionRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public GameMissionPath as(String alias) {
            return new GameMissionPath(DSL.name(alias), this);
        }

        @Override
        public GameMissionPath as(Name alias) {
            return new GameMissionPath(alias, this);
        }

        @Override
        public GameMissionPath as(Table<?> alias) {
            return new GameMissionPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Gamedata.GAMEDATA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.GAME_MISSION_FK_GAME_MISSION_GAME_VERSION1_IDX);
    }

    @Override
    public Identity<GameMissionRecord, Integer> getIdentity() {
        return (Identity<GameMissionRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<GameMissionRecord> getPrimaryKey() {
        return Keys.KEY_GAME_MISSION_PRIMARY;
    }

    @Override
    public List<UniqueKey<GameMissionRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_GAME_MISSION_ID_UNIQUE);
    }

    @Override
    public List<ForeignKey<GameMissionRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_GAME_MISSION_GAME_VERSION1);
    }

    private transient GameVersionPath _gameVersion;

    /**
     * Get the implicit join path to the <code>gamedata.game_version</code>
     * table.
     */
    public GameVersionPath gameVersion() {
        if (_gameVersion == null)
            _gameVersion = new GameVersionPath(this, Keys.FK_GAME_MISSION_GAME_VERSION1, null);

        return _gameVersion;
    }

    private transient GroupAttemptPath _groupAttempt;

    /**
     * Get the implicit to-many join path to the
     * <code>gamedata.group_attempt</code> table
     */
    public GroupAttemptPath groupAttempt() {
        if (_groupAttempt == null)
            _groupAttempt = new GroupAttemptPath(this, null, Keys.FK_GROUP_ATTEMPT_GAME_MISSION1.getInverseKey());

        return _groupAttempt;
    }

    private transient LearningGoalPath _learningGoal;

    /**
     * Get the implicit to-many join path to the
     * <code>gamedata.learning_goal</code> table
     */
    public LearningGoalPath learningGoal() {
        if (_learningGoal == null)
            _learningGoal = new LearningGoalPath(this, null, Keys.FK_LEARNING_GOAL_GAME_MISSION1.getInverseKey());

        return _learningGoal;
    }

    private transient MissionEventPath _missionEvent;

    /**
     * Get the implicit to-many join path to the
     * <code>gamedata.mission_event</code> table
     */
    public MissionEventPath missionEvent() {
        if (_missionEvent == null)
            _missionEvent = new MissionEventPath(this, null, Keys.FK_MISSION_EVENT_GAME_MISSION1.getInverseKey());

        return _missionEvent;
    }

    private transient PlayerAttemptPath _playerAttempt;

    /**
     * Get the implicit to-many join path to the
     * <code>gamedata.player_attempt</code> table
     */
    public PlayerAttemptPath playerAttempt() {
        if (_playerAttempt == null)
            _playerAttempt = new PlayerAttemptPath(this, null, Keys.FK_PLAYER_ATTEMPT_GAME_MISSION1.getInverseKey());

        return _playerAttempt;
    }

    private transient DashboardTemplatePath _dashboardTemplate;

    /**
     * Get the implicit to-many join path to the
     * <code>gamedata.dashboard_template</code> table
     */
    public DashboardTemplatePath dashboardTemplate() {
        if (_dashboardTemplate == null)
            _dashboardTemplate = new DashboardTemplatePath(this, null, Keys.FK_PRIVATE_DASHBOARD_GAME_MISSION1.getInverseKey());

        return _dashboardTemplate;
    }

    @Override
    public GameMission as(String alias) {
        return new GameMission(DSL.name(alias), this);
    }

    @Override
    public GameMission as(Name alias) {
        return new GameMission(alias, this);
    }

    @Override
    public GameMission as(Table<?> alias) {
        return new GameMission(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public GameMission rename(String name) {
        return new GameMission(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public GameMission rename(Name name) {
        return new GameMission(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public GameMission rename(Table<?> name) {
        return new GameMission(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public GameMission where(Condition condition) {
        return new GameMission(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public GameMission where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public GameMission where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public GameMission where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public GameMission where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public GameMission where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public GameMission where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public GameMission where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public GameMission whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public GameMission whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
