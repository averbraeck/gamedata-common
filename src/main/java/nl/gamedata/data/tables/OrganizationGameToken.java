/*
 * This file is generated by jOOQ.
 */
package nl.gamedata.data.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import nl.gamedata.data.Gamedata;
import nl.gamedata.data.Indexes;
import nl.gamedata.data.Keys;
import nl.gamedata.data.tables.OrganizationGame.OrganizationGamePath;
import nl.gamedata.data.tables.records.OrganizationGameTokenRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OrganizationGameToken extends TableImpl<OrganizationGameTokenRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>gamedata.organization_game_token</code>
     */
    public static final OrganizationGameToken ORGANIZATION_GAME_TOKEN = new OrganizationGameToken();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OrganizationGameTokenRecord> getRecordType() {
        return OrganizationGameTokenRecord.class;
    }

    /**
     * The column <code>gamedata.organization_game_token.id</code>.
     */
    public final TableField<OrganizationGameTokenRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>gamedata.organization_game_token.name</code>.
     */
    public final TableField<OrganizationGameTokenRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>gamedata.organization_game_token.value</code>.
     */
    public final TableField<OrganizationGameTokenRecord, String> VALUE = createField(DSL.name("value"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>gamedata.organization_game_token.writer</code>.
     */
    public final TableField<OrganizationGameTokenRecord, Byte> WRITER = createField(DSL.name("writer"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.field(DSL.raw("1"), SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>gamedata.organization_game_token.reader</code>.
     */
    public final TableField<OrganizationGameTokenRecord, Byte> READER = createField(DSL.name("reader"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.field(DSL.raw("1"), SQLDataType.TINYINT)), this, "");

    /**
     * The column
     * <code>gamedata.organization_game_token.organization_game_id</code>.
     */
    public final TableField<OrganizationGameTokenRecord, Integer> ORGANIZATION_GAME_ID = createField(DSL.name("organization_game_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private OrganizationGameToken(Name alias, Table<OrganizationGameTokenRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private OrganizationGameToken(Name alias, Table<OrganizationGameTokenRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>gamedata.organization_game_token</code> table
     * reference
     */
    public OrganizationGameToken(String alias) {
        this(DSL.name(alias), ORGANIZATION_GAME_TOKEN);
    }

    /**
     * Create an aliased <code>gamedata.organization_game_token</code> table
     * reference
     */
    public OrganizationGameToken(Name alias) {
        this(alias, ORGANIZATION_GAME_TOKEN);
    }

    /**
     * Create a <code>gamedata.organization_game_token</code> table reference
     */
    public OrganizationGameToken() {
        this(DSL.name("organization_game_token"), null);
    }

    public <O extends Record> OrganizationGameToken(Table<O> path, ForeignKey<O, OrganizationGameTokenRecord> childPath, InverseForeignKey<O, OrganizationGameTokenRecord> parentPath) {
        super(path, childPath, parentPath, ORGANIZATION_GAME_TOKEN);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class OrganizationGameTokenPath extends OrganizationGameToken implements Path<OrganizationGameTokenRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> OrganizationGameTokenPath(Table<O> path, ForeignKey<O, OrganizationGameTokenRecord> childPath, InverseForeignKey<O, OrganizationGameTokenRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private OrganizationGameTokenPath(Name alias, Table<OrganizationGameTokenRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public OrganizationGameTokenPath as(String alias) {
            return new OrganizationGameTokenPath(DSL.name(alias), this);
        }

        @Override
        public OrganizationGameTokenPath as(Name alias) {
            return new OrganizationGameTokenPath(alias, this);
        }

        @Override
        public OrganizationGameTokenPath as(Table<?> alias) {
            return new OrganizationGameTokenPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Gamedata.GAMEDATA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.ORGANIZATION_GAME_TOKEN_FK_ORGANIZATION_GAME_TOKEN_ORGANIZATION_GAME1_IDX);
    }

    @Override
    public Identity<OrganizationGameTokenRecord, Integer> getIdentity() {
        return (Identity<OrganizationGameTokenRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<OrganizationGameTokenRecord> getPrimaryKey() {
        return Keys.KEY_ORGANIZATION_GAME_TOKEN_PRIMARY;
    }

    @Override
    public List<UniqueKey<OrganizationGameTokenRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_ORGANIZATION_GAME_TOKEN_ID_UNIQUE, Keys.KEY_ORGANIZATION_GAME_TOKEN_VALUE_UNIQUE);
    }

    @Override
    public List<ForeignKey<OrganizationGameTokenRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_ORGANIZATION_GAME_TOKEN_ORGANIZATION_GAME1);
    }

    private transient OrganizationGamePath _organizationGame;

    /**
     * Get the implicit join path to the <code>gamedata.organization_game</code>
     * table.
     */
    public OrganizationGamePath organizationGame() {
        if (_organizationGame == null)
            _organizationGame = new OrganizationGamePath(this, Keys.FK_ORGANIZATION_GAME_TOKEN_ORGANIZATION_GAME1, null);

        return _organizationGame;
    }

    @Override
    public OrganizationGameToken as(String alias) {
        return new OrganizationGameToken(DSL.name(alias), this);
    }

    @Override
    public OrganizationGameToken as(Name alias) {
        return new OrganizationGameToken(alias, this);
    }

    @Override
    public OrganizationGameToken as(Table<?> alias) {
        return new OrganizationGameToken(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public OrganizationGameToken rename(String name) {
        return new OrganizationGameToken(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public OrganizationGameToken rename(Name name) {
        return new OrganizationGameToken(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public OrganizationGameToken rename(Table<?> name) {
        return new OrganizationGameToken(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public OrganizationGameToken where(Condition condition) {
        return new OrganizationGameToken(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public OrganizationGameToken where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public OrganizationGameToken where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public OrganizationGameToken where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public OrganizationGameToken where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public OrganizationGameToken where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public OrganizationGameToken where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public OrganizationGameToken where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public OrganizationGameToken whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public OrganizationGameToken whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
