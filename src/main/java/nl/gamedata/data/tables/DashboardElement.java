/*
 * This file is generated by jOOQ.
 */
package nl.gamedata.data.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import nl.gamedata.data.Gamedata;
import nl.gamedata.data.Keys;
import nl.gamedata.data.tables.ElementProperty.ElementPropertyPath;
import nl.gamedata.data.tables.TemplateElement.TemplateElementPath;
import nl.gamedata.data.tables.records.DashboardElementRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DashboardElement extends TableImpl<DashboardElementRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>gamedata.dashboard_element</code>
     */
    public static final DashboardElement DASHBOARD_ELEMENT = new DashboardElement();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DashboardElementRecord> getRecordType() {
        return DashboardElementRecord.class;
    }

    /**
     * The column <code>gamedata.dashboard_element.id</code>.
     */
    public final TableField<DashboardElementRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>gamedata.dashboard_element.code</code>.
     */
    public final TableField<DashboardElementRecord, String> CODE = createField(DSL.name("code"), SQLDataType.VARCHAR(16).nullable(false), this, "");

    /**
     * The column <code>gamedata.dashboard_element.name</code>.
     */
    public final TableField<DashboardElementRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>gamedata.dashboard_element.description</code>.
     */
    public final TableField<DashboardElementRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB.nullable(false), this, "");

    private DashboardElement(Name alias, Table<DashboardElementRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private DashboardElement(Name alias, Table<DashboardElementRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>gamedata.dashboard_element</code> table reference
     */
    public DashboardElement(String alias) {
        this(DSL.name(alias), DASHBOARD_ELEMENT);
    }

    /**
     * Create an aliased <code>gamedata.dashboard_element</code> table reference
     */
    public DashboardElement(Name alias) {
        this(alias, DASHBOARD_ELEMENT);
    }

    /**
     * Create a <code>gamedata.dashboard_element</code> table reference
     */
    public DashboardElement() {
        this(DSL.name("dashboard_element"), null);
    }

    public <O extends Record> DashboardElement(Table<O> path, ForeignKey<O, DashboardElementRecord> childPath, InverseForeignKey<O, DashboardElementRecord> parentPath) {
        super(path, childPath, parentPath, DASHBOARD_ELEMENT);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class DashboardElementPath extends DashboardElement implements Path<DashboardElementRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> DashboardElementPath(Table<O> path, ForeignKey<O, DashboardElementRecord> childPath, InverseForeignKey<O, DashboardElementRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private DashboardElementPath(Name alias, Table<DashboardElementRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public DashboardElementPath as(String alias) {
            return new DashboardElementPath(DSL.name(alias), this);
        }

        @Override
        public DashboardElementPath as(Name alias) {
            return new DashboardElementPath(alias, this);
        }

        @Override
        public DashboardElementPath as(Table<?> alias) {
            return new DashboardElementPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Gamedata.GAMEDATA;
    }

    @Override
    public Identity<DashboardElementRecord, Integer> getIdentity() {
        return (Identity<DashboardElementRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<DashboardElementRecord> getPrimaryKey() {
        return Keys.KEY_DASHBOARD_ELEMENT_PRIMARY;
    }

    @Override
    public List<UniqueKey<DashboardElementRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_DASHBOARD_ELEMENT_CODE_UNIQUE, Keys.KEY_DASHBOARD_ELEMENT_ID_UNIQUE);
    }

    private transient ElementPropertyPath _elementProperty;

    /**
     * Get the implicit to-many join path to the
     * <code>gamedata.element_property</code> table
     */
    public ElementPropertyPath elementProperty() {
        if (_elementProperty == null)
            _elementProperty = new ElementPropertyPath(this, null, Keys.FK_ELEMENT_PROPERTY_DASHBOARD_ELEMENT1.getInverseKey());

        return _elementProperty;
    }

    private transient TemplateElementPath _templateElement;

    /**
     * Get the implicit to-many join path to the
     * <code>gamedata.template_element</code> table
     */
    public TemplateElementPath templateElement() {
        if (_templateElement == null)
            _templateElement = new TemplateElementPath(this, null, Keys.FK_TEMPLATE_ELEMENT_DASHBOARD_ELEMENT1.getInverseKey());

        return _templateElement;
    }

    @Override
    public DashboardElement as(String alias) {
        return new DashboardElement(DSL.name(alias), this);
    }

    @Override
    public DashboardElement as(Name alias) {
        return new DashboardElement(alias, this);
    }

    @Override
    public DashboardElement as(Table<?> alias) {
        return new DashboardElement(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public DashboardElement rename(String name) {
        return new DashboardElement(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DashboardElement rename(Name name) {
        return new DashboardElement(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public DashboardElement rename(Table<?> name) {
        return new DashboardElement(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DashboardElement where(Condition condition) {
        return new DashboardElement(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DashboardElement where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DashboardElement where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DashboardElement where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DashboardElement where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DashboardElement where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DashboardElement where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DashboardElement where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DashboardElement whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DashboardElement whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
