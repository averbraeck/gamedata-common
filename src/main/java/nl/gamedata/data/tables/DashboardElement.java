/*
 * This file is generated by jOOQ.
 */
package nl.gamedata.data.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import nl.gamedata.data.Gamedata;
import nl.gamedata.data.Keys;
import nl.gamedata.data.tables.records.DashboardElementRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DashboardElement extends TableImpl<DashboardElementRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>gamedata.dashboard_element</code>
     */
    public static final DashboardElement DASHBOARD_ELEMENT = new DashboardElement();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DashboardElementRecord> getRecordType() {
        return DashboardElementRecord.class;
    }

    /**
     * The column <code>gamedata.dashboard_element.id</code>.
     */
    public final TableField<DashboardElementRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>gamedata.dashboard_element.name</code>.
     */
    public final TableField<DashboardElementRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>gamedata.dashboard_element.descriiption</code>.
     */
    public final TableField<DashboardElementRecord, String> DESCRIIPTION = createField(DSL.name("descriiption"), SQLDataType.CLOB.nullable(false), this, "");

    private DashboardElement(Name alias, Table<DashboardElementRecord> aliased) {
        this(alias, aliased, null);
    }

    private DashboardElement(Name alias, Table<DashboardElementRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>gamedata.dashboard_element</code> table reference
     */
    public DashboardElement(String alias) {
        this(DSL.name(alias), DASHBOARD_ELEMENT);
    }

    /**
     * Create an aliased <code>gamedata.dashboard_element</code> table reference
     */
    public DashboardElement(Name alias) {
        this(alias, DASHBOARD_ELEMENT);
    }

    /**
     * Create a <code>gamedata.dashboard_element</code> table reference
     */
    public DashboardElement() {
        this(DSL.name("dashboard_element"), null);
    }

    public <O extends Record> DashboardElement(Table<O> child, ForeignKey<O, DashboardElementRecord> key) {
        super(child, key, DASHBOARD_ELEMENT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Gamedata.GAMEDATA;
    }

    @Override
    public Identity<DashboardElementRecord, Integer> getIdentity() {
        return (Identity<DashboardElementRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<DashboardElementRecord> getPrimaryKey() {
        return Keys.KEY_DASHBOARD_ELEMENT_PRIMARY;
    }

    @Override
    public List<UniqueKey<DashboardElementRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_DASHBOARD_ELEMENT_ID_UNIQUE, Keys.KEY_DASHBOARD_ELEMENT_NAME_UNIQUE);
    }

    @Override
    public DashboardElement as(String alias) {
        return new DashboardElement(DSL.name(alias), this);
    }

    @Override
    public DashboardElement as(Name alias) {
        return new DashboardElement(alias, this);
    }

    @Override
    public DashboardElement as(Table<?> alias) {
        return new DashboardElement(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public DashboardElement rename(String name) {
        return new DashboardElement(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DashboardElement rename(Name name) {
        return new DashboardElement(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public DashboardElement rename(Table<?> name) {
        return new DashboardElement(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super Integer, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super Integer, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
