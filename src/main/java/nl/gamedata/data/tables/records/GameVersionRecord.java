/*
 * This file is generated by jOOQ.
 */
package nl.gamedata.data.tables.records;


import nl.gamedata.data.tables.GameVersion;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GameVersionRecord extends UpdatableRecordImpl<GameVersionRecord> implements Record4<Integer, String, Byte, Integer> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>gamedata.game_version.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>gamedata.game_version.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>gamedata.game_version.name</code>.
     */
    public void setName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>gamedata.game_version.name</code>.
     */
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>gamedata.game_version.archived</code>.
     */
    public void setArchived(Byte value) {
        set(2, value);
    }

    /**
     * Getter for <code>gamedata.game_version.archived</code>.
     */
    public Byte getArchived() {
        return (Byte) get(2);
    }

    /**
     * Setter for <code>gamedata.game_version.game_id</code>.
     */
    public void setGameId(Integer value) {
        set(3, value);
    }

    /**
     * Getter for <code>gamedata.game_version.game_id</code>.
     */
    public Integer getGameId() {
        return (Integer) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, Byte, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<Integer, String, Byte, Integer> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return GameVersion.GAME_VERSION.ID;
    }

    @Override
    public Field<String> field2() {
        return GameVersion.GAME_VERSION.NAME;
    }

    @Override
    public Field<Byte> field3() {
        return GameVersion.GAME_VERSION.ARCHIVED;
    }

    @Override
    public Field<Integer> field4() {
        return GameVersion.GAME_VERSION.GAME_ID;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getName();
    }

    @Override
    public Byte component3() {
        return getArchived();
    }

    @Override
    public Integer component4() {
        return getGameId();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getName();
    }

    @Override
    public Byte value3() {
        return getArchived();
    }

    @Override
    public Integer value4() {
        return getGameId();
    }

    @Override
    public GameVersionRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public GameVersionRecord value2(String value) {
        setName(value);
        return this;
    }

    @Override
    public GameVersionRecord value3(Byte value) {
        setArchived(value);
        return this;
    }

    @Override
    public GameVersionRecord value4(Integer value) {
        setGameId(value);
        return this;
    }

    @Override
    public GameVersionRecord values(Integer value1, String value2, Byte value3, Integer value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached GameVersionRecord
     */
    public GameVersionRecord() {
        super(GameVersion.GAME_VERSION);
    }

    /**
     * Create a detached, initialised GameVersionRecord
     */
    public GameVersionRecord(Integer id, String name, Byte archived, Integer gameId) {
        super(GameVersion.GAME_VERSION);

        setId(id);
        setName(name);
        setArchived(archived);
        setGameId(gameId);
        resetChangedOnNotNull();
    }
}
