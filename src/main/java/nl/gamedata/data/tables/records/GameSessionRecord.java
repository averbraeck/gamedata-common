/*
 * This file is generated by jOOQ.
 */
package nl.gamedata.data.tables.records;


import java.time.LocalDate;
import java.time.LocalDateTime;

import nl.gamedata.data.tables.GameSession;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GameSessionRecord extends UpdatableRecordImpl<GameSessionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>gamedata.game_session.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>gamedata.game_session.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>gamedata.game_session.code</code>.
     */
    public void setCode(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>gamedata.game_session.code</code>.
     */
    public String getCode() {
        return (String) get(1);
    }

    /**
     * Setter for <code>gamedata.game_session.name</code>.
     */
    public void setName(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>gamedata.game_session.name</code>.
     */
    public String getName() {
        return (String) get(2);
    }

    /**
     * Setter for <code>gamedata.game_session.description</code>.
     */
    public void setDescription(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>gamedata.game_session.description</code>.
     */
    public String getDescription() {
        return (String) get(3);
    }

    /**
     * Setter for <code>gamedata.game_session.session_token</code>.
     */
    public void setSessionToken(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>gamedata.game_session.session_token</code>.
     */
    public String getSessionToken() {
        return (String) get(4);
    }

    /**
     * Setter for <code>gamedata.game_session.session_status</code>.
     */
    public void setSessionStatus(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>gamedata.game_session.session_status</code>.
     */
    public String getSessionStatus() {
        return (String) get(5);
    }

    /**
     * Setter for <code>gamedata.game_session.play_date</code>.
     */
    public void setPlayDate(LocalDate value) {
        set(6, value);
    }

    /**
     * Getter for <code>gamedata.game_session.play_date</code>.
     */
    public LocalDate getPlayDate() {
        return (LocalDate) get(6);
    }

    /**
     * Setter for <code>gamedata.game_session.valid</code>.
     */
    public void setValid(Byte value) {
        set(7, value);
    }

    /**
     * Getter for <code>gamedata.game_session.valid</code>.
     */
    public Byte getValid() {
        return (Byte) get(7);
    }

    /**
     * Setter for <code>gamedata.game_session.valid_from</code>.
     */
    public void setValidFrom(LocalDateTime value) {
        set(8, value);
    }

    /**
     * Getter for <code>gamedata.game_session.valid_from</code>.
     */
    public LocalDateTime getValidFrom() {
        return (LocalDateTime) get(8);
    }

    /**
     * Setter for <code>gamedata.game_session.valid_until</code>.
     */
    public void setValidUntil(LocalDateTime value) {
        set(9, value);
    }

    /**
     * Getter for <code>gamedata.game_session.valid_until</code>.
     */
    public LocalDateTime getValidUntil() {
        return (LocalDateTime) get(9);
    }

    /**
     * Setter for <code>gamedata.game_session.token_forced</code>.
     */
    public void setTokenForced(Byte value) {
        set(10, value);
    }

    /**
     * Getter for <code>gamedata.game_session.token_forced</code>.
     */
    public Byte getTokenForced() {
        return (Byte) get(10);
    }

    /**
     * Setter for <code>gamedata.game_session.token_for_dashboard</code>.
     */
    public void setTokenForDashboard(Byte value) {
        set(11, value);
    }

    /**
     * Getter for <code>gamedata.game_session.token_for_dashboard</code>.
     */
    public Byte getTokenForDashboard() {
        return (Byte) get(11);
    }

    /**
     * Setter for <code>gamedata.game_session.archived</code>.
     */
    public void setArchived(Byte value) {
        set(12, value);
    }

    /**
     * Getter for <code>gamedata.game_session.archived</code>.
     */
    public Byte getArchived() {
        return (Byte) get(12);
    }

    /**
     * Setter for <code>gamedata.game_session.game_version_id</code>.
     */
    public void setGameVersionId(Integer value) {
        set(13, value);
    }

    /**
     * Getter for <code>gamedata.game_session.game_version_id</code>.
     */
    public Integer getGameVersionId() {
        return (Integer) get(13);
    }

    /**
     * Setter for <code>gamedata.game_session.organization_id</code>.
     */
    public void setOrganizationId(Integer value) {
        set(14, value);
    }

    /**
     * Getter for <code>gamedata.game_session.organization_id</code>.
     */
    public Integer getOrganizationId() {
        return (Integer) get(14);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached GameSessionRecord
     */
    public GameSessionRecord() {
        super(GameSession.GAME_SESSION);
    }

    /**
     * Create a detached, initialised GameSessionRecord
     */
    public GameSessionRecord(Integer id, String code, String name, String description, String sessionToken, String sessionStatus, LocalDate playDate, Byte valid, LocalDateTime validFrom, LocalDateTime validUntil, Byte tokenForced, Byte tokenForDashboard, Byte archived, Integer gameVersionId, Integer organizationId) {
        super(GameSession.GAME_SESSION);

        setId(id);
        setCode(code);
        setName(name);
        setDescription(description);
        setSessionToken(sessionToken);
        setSessionStatus(sessionStatus);
        setPlayDate(playDate);
        setValid(valid);
        setValidFrom(validFrom);
        setValidUntil(validUntil);
        setTokenForced(tokenForced);
        setTokenForDashboard(tokenForDashboard);
        setArchived(archived);
        setGameVersionId(gameVersionId);
        setOrganizationId(organizationId);
        resetChangedOnNotNull();
    }
}
