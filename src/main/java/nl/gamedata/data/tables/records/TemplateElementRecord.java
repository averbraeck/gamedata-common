/*
 * This file is generated by jOOQ.
 */
package nl.gamedata.data.tables.records;


import nl.gamedata.data.tables.TemplateElement;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TemplateElementRecord extends UpdatableRecordImpl<TemplateElementRecord> implements Record3<Integer, Integer, Integer> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>gamedata.template_element.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>gamedata.template_element.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>gamedata.template_element.dashboard_element_id</code>.
     */
    public void setDashboardElementId(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>gamedata.template_element.dashboard_element_id</code>.
     */
    public Integer getDashboardElementId() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>gamedata.template_element.dashboard_template_id</code>.
     */
    public void setDashboardTemplateId(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>gamedata.template_element.dashboard_template_id</code>.
     */
    public Integer getDashboardTemplateId() {
        return (Integer) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, Integer, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Integer, Integer, Integer> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return TemplateElement.TEMPLATE_ELEMENT.ID;
    }

    @Override
    public Field<Integer> field2() {
        return TemplateElement.TEMPLATE_ELEMENT.DASHBOARD_ELEMENT_ID;
    }

    @Override
    public Field<Integer> field3() {
        return TemplateElement.TEMPLATE_ELEMENT.DASHBOARD_TEMPLATE_ID;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public Integer component2() {
        return getDashboardElementId();
    }

    @Override
    public Integer component3() {
        return getDashboardTemplateId();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public Integer value2() {
        return getDashboardElementId();
    }

    @Override
    public Integer value3() {
        return getDashboardTemplateId();
    }

    @Override
    public TemplateElementRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public TemplateElementRecord value2(Integer value) {
        setDashboardElementId(value);
        return this;
    }

    @Override
    public TemplateElementRecord value3(Integer value) {
        setDashboardTemplateId(value);
        return this;
    }

    @Override
    public TemplateElementRecord values(Integer value1, Integer value2, Integer value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TemplateElementRecord
     */
    public TemplateElementRecord() {
        super(TemplateElement.TEMPLATE_ELEMENT);
    }

    /**
     * Create a detached, initialised TemplateElementRecord
     */
    public TemplateElementRecord(Integer id, Integer dashboardElementId, Integer dashboardTemplateId) {
        super(TemplateElement.TEMPLATE_ELEMENT);

        setId(id);
        setDashboardElementId(dashboardElementId);
        setDashboardTemplateId(dashboardTemplateId);
        resetChangedOnNotNull();
    }
}
