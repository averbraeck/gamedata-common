/*
 * This file is generated by jOOQ.
 */
package nl.gamedata.data.tables.records;


import nl.gamedata.data.tables.Scale;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record6;
import org.jooq.Row6;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ScaleRecord extends UpdatableRecordImpl<ScaleRecord> implements Record6<Integer, String, Double, Double, String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>gamedata.scale.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>gamedata.scale.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>gamedata.scale.type</code>.
     */
    public void setType(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>gamedata.scale.type</code>.
     */
    public String getType() {
        return (String) get(1);
    }

    /**
     * Setter for <code>gamedata.scale.min_value</code>.
     */
    public void setMinValue(Double value) {
        set(2, value);
    }

    /**
     * Getter for <code>gamedata.scale.min_value</code>.
     */
    public Double getMinValue() {
        return (Double) get(2);
    }

    /**
     * Setter for <code>gamedata.scale.max_value</code>.
     */
    public void setMaxValue(Double value) {
        set(3, value);
    }

    /**
     * Getter for <code>gamedata.scale.max_value</code>.
     */
    public Double getMaxValue() {
        return (Double) get(3);
    }

    /**
     * Setter for <code>gamedata.scale.value_list</code>.
     */
    public void setValueList(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>gamedata.scale.value_list</code>.
     */
    public String getValueList() {
        return (String) get(4);
    }

    /**
     * Setter for <code>gamedata.scale.value_scores</code>.
     */
    public void setValueScores(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>gamedata.scale.value_scores</code>.
     */
    public String getValueScores() {
        return (String) get(5);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record6 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, String, Double, Double, String, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    @Override
    public Row6<Integer, String, Double, Double, String, String> valuesRow() {
        return (Row6) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Scale.SCALE.ID;
    }

    @Override
    public Field<String> field2() {
        return Scale.SCALE.TYPE;
    }

    @Override
    public Field<Double> field3() {
        return Scale.SCALE.MIN_VALUE;
    }

    @Override
    public Field<Double> field4() {
        return Scale.SCALE.MAX_VALUE;
    }

    @Override
    public Field<String> field5() {
        return Scale.SCALE.VALUE_LIST;
    }

    @Override
    public Field<String> field6() {
        return Scale.SCALE.VALUE_SCORES;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getType();
    }

    @Override
    public Double component3() {
        return getMinValue();
    }

    @Override
    public Double component4() {
        return getMaxValue();
    }

    @Override
    public String component5() {
        return getValueList();
    }

    @Override
    public String component6() {
        return getValueScores();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getType();
    }

    @Override
    public Double value3() {
        return getMinValue();
    }

    @Override
    public Double value4() {
        return getMaxValue();
    }

    @Override
    public String value5() {
        return getValueList();
    }

    @Override
    public String value6() {
        return getValueScores();
    }

    @Override
    public ScaleRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public ScaleRecord value2(String value) {
        setType(value);
        return this;
    }

    @Override
    public ScaleRecord value3(Double value) {
        setMinValue(value);
        return this;
    }

    @Override
    public ScaleRecord value4(Double value) {
        setMaxValue(value);
        return this;
    }

    @Override
    public ScaleRecord value5(String value) {
        setValueList(value);
        return this;
    }

    @Override
    public ScaleRecord value6(String value) {
        setValueScores(value);
        return this;
    }

    @Override
    public ScaleRecord values(Integer value1, String value2, Double value3, Double value4, String value5, String value6) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ScaleRecord
     */
    public ScaleRecord() {
        super(Scale.SCALE);
    }

    /**
     * Create a detached, initialised ScaleRecord
     */
    public ScaleRecord(Integer id, String type, Double minValue, Double maxValue, String valueList, String valueScores) {
        super(Scale.SCALE);

        setId(id);
        setType(type);
        setMinValue(minValue);
        setMaxValue(maxValue);
        setValueList(valueList);
        setValueScores(valueScores);
        resetChangedOnNotNull();
    }
}
