/*
 * This file is generated by jOOQ.
 */
package nl.gamedata.data.tables.records;


import nl.gamedata.data.tables.Game;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GameRecord extends UpdatableRecordImpl<GameRecord> implements Record4<Integer, String, String, Byte> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>gamedata.game.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>gamedata.game.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>gamedata.game.name</code>.
     */
    public void setName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>gamedata.game.name</code>.
     */
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>gamedata.game.description</code>.
     */
    public void setDescription(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>gamedata.game.description</code>.
     */
    public String getDescription() {
        return (String) get(2);
    }

    /**
     * Setter for <code>gamedata.game.token_forced</code>.
     */
    public void setTokenForced(Byte value) {
        set(3, value);
    }

    /**
     * Getter for <code>gamedata.game.token_forced</code>.
     */
    public Byte getTokenForced() {
        return (Byte) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, String, Byte> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<Integer, String, String, Byte> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Game.GAME.ID;
    }

    @Override
    public Field<String> field2() {
        return Game.GAME.NAME;
    }

    @Override
    public Field<String> field3() {
        return Game.GAME.DESCRIPTION;
    }

    @Override
    public Field<Byte> field4() {
        return Game.GAME.TOKEN_FORCED;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getName();
    }

    @Override
    public String component3() {
        return getDescription();
    }

    @Override
    public Byte component4() {
        return getTokenForced();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getName();
    }

    @Override
    public String value3() {
        return getDescription();
    }

    @Override
    public Byte value4() {
        return getTokenForced();
    }

    @Override
    public GameRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public GameRecord value2(String value) {
        setName(value);
        return this;
    }

    @Override
    public GameRecord value3(String value) {
        setDescription(value);
        return this;
    }

    @Override
    public GameRecord value4(Byte value) {
        setTokenForced(value);
        return this;
    }

    @Override
    public GameRecord values(Integer value1, String value2, String value3, Byte value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached GameRecord
     */
    public GameRecord() {
        super(Game.GAME);
    }

    /**
     * Create a detached, initialised GameRecord
     */
    public GameRecord(Integer id, String name, String description, Byte tokenForced) {
        super(Game.GAME);

        setId(id);
        setName(name);
        setDescription(description);
        setTokenForced(tokenForced);
        resetChangedOnNotNull();
    }
}
