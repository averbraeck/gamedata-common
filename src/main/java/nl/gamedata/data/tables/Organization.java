/*
 * This file is generated by jOOQ.
 */
package nl.gamedata.data.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import nl.gamedata.data.Gamedata;
import nl.gamedata.data.Keys;
import nl.gamedata.data.tables.GameSession.GameSessionPath;
import nl.gamedata.data.tables.OrganizationGame.OrganizationGamePath;
import nl.gamedata.data.tables.OrganizationRole.OrganizationRolePath;
import nl.gamedata.data.tables.records.OrganizationRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Organization extends TableImpl<OrganizationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>gamedata.organization</code>
     */
    public static final Organization ORGANIZATION = new Organization();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OrganizationRecord> getRecordType() {
        return OrganizationRecord.class;
    }

    /**
     * The column <code>gamedata.organization.id</code>.
     */
    public final TableField<OrganizationRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>gamedata.organization.code</code>.
     */
    public final TableField<OrganizationRecord, String> CODE = createField(DSL.name("code"), SQLDataType.VARCHAR(16).nullable(false), this, "");

    /**
     * The column <code>gamedata.organization.name</code>.
     */
    public final TableField<OrganizationRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>gamedata.organization.logo</code>.
     */
    public final TableField<OrganizationRecord, byte[]> LOGO = createField(DSL.name("logo"), SQLDataType.BLOB.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.BLOB)), this, "");

    private Organization(Name alias, Table<OrganizationRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Organization(Name alias, Table<OrganizationRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>gamedata.organization</code> table reference
     */
    public Organization(String alias) {
        this(DSL.name(alias), ORGANIZATION);
    }

    /**
     * Create an aliased <code>gamedata.organization</code> table reference
     */
    public Organization(Name alias) {
        this(alias, ORGANIZATION);
    }

    /**
     * Create a <code>gamedata.organization</code> table reference
     */
    public Organization() {
        this(DSL.name("organization"), null);
    }

    public <O extends Record> Organization(Table<O> path, ForeignKey<O, OrganizationRecord> childPath, InverseForeignKey<O, OrganizationRecord> parentPath) {
        super(path, childPath, parentPath, ORGANIZATION);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class OrganizationPath extends Organization implements Path<OrganizationRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> OrganizationPath(Table<O> path, ForeignKey<O, OrganizationRecord> childPath, InverseForeignKey<O, OrganizationRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private OrganizationPath(Name alias, Table<OrganizationRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public OrganizationPath as(String alias) {
            return new OrganizationPath(DSL.name(alias), this);
        }

        @Override
        public OrganizationPath as(Name alias) {
            return new OrganizationPath(alias, this);
        }

        @Override
        public OrganizationPath as(Table<?> alias) {
            return new OrganizationPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Gamedata.GAMEDATA;
    }

    @Override
    public Identity<OrganizationRecord, Integer> getIdentity() {
        return (Identity<OrganizationRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<OrganizationRecord> getPrimaryKey() {
        return Keys.KEY_ORGANIZATION_PRIMARY;
    }

    @Override
    public List<UniqueKey<OrganizationRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_ORGANIZATION_CODE_UNIQUE, Keys.KEY_ORGANIZATION_ID_UNIQUE);
    }

    private transient GameSessionPath _gameSession;

    /**
     * Get the implicit to-many join path to the
     * <code>gamedata.game_session</code> table
     */
    public GameSessionPath gameSession() {
        if (_gameSession == null)
            _gameSession = new GameSessionPath(this, null, Keys.FK_GAME_SESSION_ORGANIZATION1.getInverseKey());

        return _gameSession;
    }

    private transient OrganizationGamePath _organizationGame;

    /**
     * Get the implicit to-many join path to the
     * <code>gamedata.organization_game</code> table
     */
    public OrganizationGamePath organizationGame() {
        if (_organizationGame == null)
            _organizationGame = new OrganizationGamePath(this, null, Keys.FK_ORGANIZATION_GAME_ORGANIZATION1.getInverseKey());

        return _organizationGame;
    }

    private transient OrganizationRolePath _organizationRole;

    /**
     * Get the implicit to-many join path to the
     * <code>gamedata.organization_role</code> table
     */
    public OrganizationRolePath organizationRole() {
        if (_organizationRole == null)
            _organizationRole = new OrganizationRolePath(this, null, Keys.FK_ORGANIZATION_ROLE_ORGANIZATION1.getInverseKey());

        return _organizationRole;
    }

    @Override
    public Organization as(String alias) {
        return new Organization(DSL.name(alias), this);
    }

    @Override
    public Organization as(Name alias) {
        return new Organization(alias, this);
    }

    @Override
    public Organization as(Table<?> alias) {
        return new Organization(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Organization rename(String name) {
        return new Organization(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Organization rename(Name name) {
        return new Organization(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Organization rename(Table<?> name) {
        return new Organization(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Organization where(Condition condition) {
        return new Organization(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Organization where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Organization where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Organization where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Organization where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Organization where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Organization where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Organization where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Organization whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Organization whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
