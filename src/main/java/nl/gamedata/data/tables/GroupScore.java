/*
 * This file is generated by jOOQ.
 */
package nl.gamedata.data.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import nl.gamedata.data.Gamedata;
import nl.gamedata.data.Indexes;
import nl.gamedata.data.Keys;
import nl.gamedata.data.tables.GroupAttempt.GroupAttemptPath;
import nl.gamedata.data.tables.GroupObjective.GroupObjectivePath;
import nl.gamedata.data.tables.Scale.ScalePath;
import nl.gamedata.data.tables.records.GroupScoreRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GroupScore extends TableImpl<GroupScoreRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>gamedata.group_score</code>
     */
    public static final GroupScore GROUP_SCORE = new GroupScore();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GroupScoreRecord> getRecordType() {
        return GroupScoreRecord.class;
    }

    /**
     * The column <code>gamedata.group_score.id</code>.
     */
    public final TableField<GroupScoreRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>gamedata.group_score.score_type</code>.
     */
    public final TableField<GroupScoreRecord, String> SCORE_TYPE = createField(DSL.name("score_type"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>gamedata.group_score.delta</code>.
     */
    public final TableField<GroupScoreRecord, Double> DELTA = createField(DSL.name("delta"), SQLDataType.FLOAT.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.FLOAT)), this, "");

    /**
     * The column <code>gamedata.group_score.new_score_number</code>.
     */
    public final TableField<GroupScoreRecord, Double> NEW_SCORE_NUMBER = createField(DSL.name("new_score_number"), SQLDataType.FLOAT.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.FLOAT)), this, "");

    /**
     * The column <code>gamedata.group_score.new_score_string</code>.
     */
    public final TableField<GroupScoreRecord, String> NEW_SCORE_STRING = createField(DSL.name("new_score_string"), SQLDataType.VARCHAR(16).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>gamedata.group_score.timestamp</code>.
     */
    public final TableField<GroupScoreRecord, LocalDateTime> TIMESTAMP = createField(DSL.name("timestamp"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("current_timestamp()"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>gamedata.group_score.final_score</code>.
     */
    public final TableField<GroupScoreRecord, Byte> FINAL_SCORE = createField(DSL.name("final_score"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>gamedata.group_score.status</code>.
     */
    public final TableField<GroupScoreRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(45).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>gamedata.group_score.round</code>.
     */
    public final TableField<GroupScoreRecord, String> ROUND = createField(DSL.name("round"), SQLDataType.VARCHAR(16).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>gamedata.group_score.game_time</code>.
     */
    public final TableField<GroupScoreRecord, String> GAME_TIME = createField(DSL.name("game_time"), SQLDataType.VARCHAR(45).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>gamedata.group_score.grouping_code</code>.
     */
    public final TableField<GroupScoreRecord, String> GROUPING_CODE = createField(DSL.name("grouping_code"), SQLDataType.VARCHAR(45).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>gamedata.group_score.group_objective_id</code>.
     */
    public final TableField<GroupScoreRecord, Integer> GROUP_OBJECTIVE_ID = createField(DSL.name("group_objective_id"), SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>gamedata.group_score.group_attempt_id</code>.
     */
    public final TableField<GroupScoreRecord, Integer> GROUP_ATTEMPT_ID = createField(DSL.name("group_attempt_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>gamedata.group_score.scale_id</code>.
     */
    public final TableField<GroupScoreRecord, Integer> SCALE_ID = createField(DSL.name("scale_id"), SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.INTEGER)), this, "");

    private GroupScore(Name alias, Table<GroupScoreRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private GroupScore(Name alias, Table<GroupScoreRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>gamedata.group_score</code> table reference
     */
    public GroupScore(String alias) {
        this(DSL.name(alias), GROUP_SCORE);
    }

    /**
     * Create an aliased <code>gamedata.group_score</code> table reference
     */
    public GroupScore(Name alias) {
        this(alias, GROUP_SCORE);
    }

    /**
     * Create a <code>gamedata.group_score</code> table reference
     */
    public GroupScore() {
        this(DSL.name("group_score"), null);
    }

    public <O extends Record> GroupScore(Table<O> path, ForeignKey<O, GroupScoreRecord> childPath, InverseForeignKey<O, GroupScoreRecord> parentPath) {
        super(path, childPath, parentPath, GROUP_SCORE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class GroupScorePath extends GroupScore implements Path<GroupScoreRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> GroupScorePath(Table<O> path, ForeignKey<O, GroupScoreRecord> childPath, InverseForeignKey<O, GroupScoreRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private GroupScorePath(Name alias, Table<GroupScoreRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public GroupScorePath as(String alias) {
            return new GroupScorePath(DSL.name(alias), this);
        }

        @Override
        public GroupScorePath as(Name alias) {
            return new GroupScorePath(alias, this);
        }

        @Override
        public GroupScorePath as(Table<?> alias) {
            return new GroupScorePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Gamedata.GAMEDATA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.GROUP_SCORE_FK_GROUP_SCORE_GROUP_ATTEMPT1_IDX, Indexes.GROUP_SCORE_FK_GROUP_SCORE_GROUP_OBJECTIVE1_IDX, Indexes.GROUP_SCORE_FK_GROUP_SCORE_SCALE1_IDX);
    }

    @Override
    public Identity<GroupScoreRecord, Integer> getIdentity() {
        return (Identity<GroupScoreRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<GroupScoreRecord> getPrimaryKey() {
        return Keys.KEY_GROUP_SCORE_PRIMARY;
    }

    @Override
    public List<UniqueKey<GroupScoreRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_GROUP_SCORE_ID_UNIQUE);
    }

    @Override
    public List<ForeignKey<GroupScoreRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_GROUP_SCORE_GROUP_ATTEMPT1, Keys.FK_GROUP_SCORE_GROUP_OBJECTIVE1, Keys.FK_GROUP_SCORE_SCALE1);
    }

    private transient GroupAttemptPath _groupAttempt;

    /**
     * Get the implicit join path to the <code>gamedata.group_attempt</code>
     * table.
     */
    public GroupAttemptPath groupAttempt() {
        if (_groupAttempt == null)
            _groupAttempt = new GroupAttemptPath(this, Keys.FK_GROUP_SCORE_GROUP_ATTEMPT1, null);

        return _groupAttempt;
    }

    private transient GroupObjectivePath _groupObjective;

    /**
     * Get the implicit join path to the <code>gamedata.group_objective</code>
     * table.
     */
    public GroupObjectivePath groupObjective() {
        if (_groupObjective == null)
            _groupObjective = new GroupObjectivePath(this, Keys.FK_GROUP_SCORE_GROUP_OBJECTIVE1, null);

        return _groupObjective;
    }

    private transient ScalePath _scale;

    /**
     * Get the implicit join path to the <code>gamedata.scale</code> table.
     */
    public ScalePath scale() {
        if (_scale == null)
            _scale = new ScalePath(this, Keys.FK_GROUP_SCORE_SCALE1, null);

        return _scale;
    }

    @Override
    public GroupScore as(String alias) {
        return new GroupScore(DSL.name(alias), this);
    }

    @Override
    public GroupScore as(Name alias) {
        return new GroupScore(alias, this);
    }

    @Override
    public GroupScore as(Table<?> alias) {
        return new GroupScore(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public GroupScore rename(String name) {
        return new GroupScore(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public GroupScore rename(Name name) {
        return new GroupScore(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public GroupScore rename(Table<?> name) {
        return new GroupScore(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public GroupScore where(Condition condition) {
        return new GroupScore(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public GroupScore where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public GroupScore where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public GroupScore where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public GroupScore where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public GroupScore where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public GroupScore where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public GroupScore where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public GroupScore whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public GroupScore whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
