/*
 * This file is generated by jOOQ.
 */
package nl.gamedata.data.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import nl.gamedata.data.Gamedata;
import nl.gamedata.data.Indexes;
import nl.gamedata.data.Keys;
import nl.gamedata.data.tables.records.UserRoleRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function8;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserRole extends TableImpl<UserRoleRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>gamedata.user_role</code>
     */
    public static final UserRole USER_ROLE = new UserRole();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserRoleRecord> getRecordType() {
        return UserRoleRecord.class;
    }

    /**
     * The column <code>gamedata.user_role.id</code>.
     */
    public final TableField<UserRoleRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>gamedata.user_role.organization_admin</code>.
     */
    public final TableField<UserRoleRecord, Byte> ORGANIZATION_ADMIN = createField(DSL.name("organization_admin"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>gamedata.user_role.session_admin</code>.
     */
    public final TableField<UserRoleRecord, Byte> SESSION_ADMIN = createField(DSL.name("session_admin"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>gamedata.user_role.session_viewer</code>.
     */
    public final TableField<UserRoleRecord, Byte> SESSION_VIEWER = createField(DSL.name("session_viewer"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>gamedata.user_role.user_id</code>.
     */
    public final TableField<UserRoleRecord, Integer> USER_ID = createField(DSL.name("user_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>gamedata.user_role.organization_id</code>.
     */
    public final TableField<UserRoleRecord, Integer> ORGANIZATION_ID = createField(DSL.name("organization_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>gamedata.user_role.session_game_access_id</code>.
     */
    public final TableField<UserRoleRecord, Integer> SESSION_GAME_ACCESS_ID = createField(DSL.name("session_game_access_id"), SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>gamedata.user_role.session_game_session_id</code>.
     */
    public final TableField<UserRoleRecord, Integer> SESSION_GAME_SESSION_ID = createField(DSL.name("session_game_session_id"), SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.INTEGER)), this, "");

    private UserRole(Name alias, Table<UserRoleRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserRole(Name alias, Table<UserRoleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>gamedata.user_role</code> table reference
     */
    public UserRole(String alias) {
        this(DSL.name(alias), USER_ROLE);
    }

    /**
     * Create an aliased <code>gamedata.user_role</code> table reference
     */
    public UserRole(Name alias) {
        this(alias, USER_ROLE);
    }

    /**
     * Create a <code>gamedata.user_role</code> table reference
     */
    public UserRole() {
        this(DSL.name("user_role"), null);
    }

    public <O extends Record> UserRole(Table<O> child, ForeignKey<O, UserRoleRecord> key) {
        super(child, key, USER_ROLE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Gamedata.GAMEDATA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.USER_ROLE_FK_USER_ROLE_GAME_ACCESS1_IDX, Indexes.USER_ROLE_FK_USER_ROLE_GAME_SESSION1_IDX, Indexes.USER_ROLE_FK_USER_ROLE_ORGANIZATION1_IDX, Indexes.USER_ROLE_FK_USER_ROLE_USER1_IDX);
    }

    @Override
    public Identity<UserRoleRecord, Integer> getIdentity() {
        return (Identity<UserRoleRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<UserRoleRecord> getPrimaryKey() {
        return Keys.KEY_USER_ROLE_PRIMARY;
    }

    @Override
    public List<UniqueKey<UserRoleRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_USER_ROLE_ID_UNIQUE);
    }

    @Override
    public List<ForeignKey<UserRoleRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_USER_ROLE_USER1, Keys.FK_USER_ROLE_ORGANIZATION1, Keys.FK_USER_ROLE_GAME_ACCESS1, Keys.FK_USER_ROLE_GAME_SESSION1);
    }

    private transient User _user;
    private transient Organization _organization;
    private transient GameAccess _gameAccess;
    private transient GameSession _gameSession;

    /**
     * Get the implicit join path to the <code>gamedata.user</code> table.
     */
    public User user() {
        if (_user == null)
            _user = new User(this, Keys.FK_USER_ROLE_USER1);

        return _user;
    }

    /**
     * Get the implicit join path to the <code>gamedata.organization</code>
     * table.
     */
    public Organization organization() {
        if (_organization == null)
            _organization = new Organization(this, Keys.FK_USER_ROLE_ORGANIZATION1);

        return _organization;
    }

    /**
     * Get the implicit join path to the <code>gamedata.game_access</code>
     * table.
     */
    public GameAccess gameAccess() {
        if (_gameAccess == null)
            _gameAccess = new GameAccess(this, Keys.FK_USER_ROLE_GAME_ACCESS1);

        return _gameAccess;
    }

    /**
     * Get the implicit join path to the <code>gamedata.game_session</code>
     * table.
     */
    public GameSession gameSession() {
        if (_gameSession == null)
            _gameSession = new GameSession(this, Keys.FK_USER_ROLE_GAME_SESSION1);

        return _gameSession;
    }

    @Override
    public UserRole as(String alias) {
        return new UserRole(DSL.name(alias), this);
    }

    @Override
    public UserRole as(Name alias) {
        return new UserRole(alias, this);
    }

    @Override
    public UserRole as(Table<?> alias) {
        return new UserRole(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserRole rename(String name) {
        return new UserRole(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserRole rename(Name name) {
        return new UserRole(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserRole rename(Table<?> name) {
        return new UserRole(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, Byte, Byte, Byte, Integer, Integer, Integer, Integer> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function8<? super Integer, ? super Byte, ? super Byte, ? super Byte, ? super Integer, ? super Integer, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function8<? super Integer, ? super Byte, ? super Byte, ? super Byte, ? super Integer, ? super Integer, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
