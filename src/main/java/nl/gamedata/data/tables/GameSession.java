/*
 * This file is generated by jOOQ.
 */
package nl.gamedata.data.tables;


import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import nl.gamedata.data.Gamedata;
import nl.gamedata.data.Indexes;
import nl.gamedata.data.Keys;
import nl.gamedata.data.tables.DashboardSession.DashboardSessionPath;
import nl.gamedata.data.tables.GameSessionRole.GameSessionRolePath;
import nl.gamedata.data.tables.GameVersion.GameVersionPath;
import nl.gamedata.data.tables.Group.GroupPath;
import nl.gamedata.data.tables.MissionEvent.MissionEventPath;
import nl.gamedata.data.tables.Organization.OrganizationPath;
import nl.gamedata.data.tables.Player.PlayerPath;
import nl.gamedata.data.tables.records.GameSessionRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GameSession extends TableImpl<GameSessionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>gamedata.game_session</code>
     */
    public static final GameSession GAME_SESSION = new GameSession();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GameSessionRecord> getRecordType() {
        return GameSessionRecord.class;
    }

    /**
     * The column <code>gamedata.game_session.id</code>.
     */
    public final TableField<GameSessionRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>gamedata.game_session.code</code>.
     */
    public final TableField<GameSessionRecord, String> CODE = createField(DSL.name("code"), SQLDataType.VARCHAR(16).nullable(false), this, "");

    /**
     * The column <code>gamedata.game_session.name</code>.
     */
    public final TableField<GameSessionRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>gamedata.game_session.description</code>.
     */
    public final TableField<GameSessionRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>gamedata.game_session.session_token</code>.
     */
    public final TableField<GameSessionRecord, String> SESSION_TOKEN = createField(DSL.name("session_token"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>gamedata.game_session.session_status</code>.
     */
    public final TableField<GameSessionRecord, String> SESSION_STATUS = createField(DSL.name("session_status"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>gamedata.game_session.play_date</code>.
     */
    public final TableField<GameSessionRecord, LocalDate> PLAY_DATE = createField(DSL.name("play_date"), SQLDataType.LOCALDATE.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.LOCALDATE)), this, "");

    /**
     * The column <code>gamedata.game_session.valid</code>.
     */
    public final TableField<GameSessionRecord, Byte> VALID = createField(DSL.name("valid"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.field(DSL.raw("1"), SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>gamedata.game_session.valid_from</code>.
     */
    public final TableField<GameSessionRecord, LocalDateTime> VALID_FROM = createField(DSL.name("valid_from"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>gamedata.game_session.valid_until</code>.
     */
    public final TableField<GameSessionRecord, LocalDateTime> VALID_UNTIL = createField(DSL.name("valid_until"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>gamedata.game_session.token_forced</code>.
     */
    public final TableField<GameSessionRecord, Byte> TOKEN_FORCED = createField(DSL.name("token_forced"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.field(DSL.raw("1"), SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>gamedata.game_session.token_for_dashboard</code>.
     */
    public final TableField<GameSessionRecord, Byte> TOKEN_FOR_DASHBOARD = createField(DSL.name("token_for_dashboard"), SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>gamedata.game_session.archived</code>.
     */
    public final TableField<GameSessionRecord, Byte> ARCHIVED = createField(DSL.name("archived"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>gamedata.game_session.game_version_id</code>.
     */
    public final TableField<GameSessionRecord, Integer> GAME_VERSION_ID = createField(DSL.name("game_version_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>gamedata.game_session.organization_id</code>.
     */
    public final TableField<GameSessionRecord, Integer> ORGANIZATION_ID = createField(DSL.name("organization_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private GameSession(Name alias, Table<GameSessionRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private GameSession(Name alias, Table<GameSessionRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>gamedata.game_session</code> table reference
     */
    public GameSession(String alias) {
        this(DSL.name(alias), GAME_SESSION);
    }

    /**
     * Create an aliased <code>gamedata.game_session</code> table reference
     */
    public GameSession(Name alias) {
        this(alias, GAME_SESSION);
    }

    /**
     * Create a <code>gamedata.game_session</code> table reference
     */
    public GameSession() {
        this(DSL.name("game_session"), null);
    }

    public <O extends Record> GameSession(Table<O> path, ForeignKey<O, GameSessionRecord> childPath, InverseForeignKey<O, GameSessionRecord> parentPath) {
        super(path, childPath, parentPath, GAME_SESSION);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class GameSessionPath extends GameSession implements Path<GameSessionRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> GameSessionPath(Table<O> path, ForeignKey<O, GameSessionRecord> childPath, InverseForeignKey<O, GameSessionRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private GameSessionPath(Name alias, Table<GameSessionRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public GameSessionPath as(String alias) {
            return new GameSessionPath(DSL.name(alias), this);
        }

        @Override
        public GameSessionPath as(Name alias) {
            return new GameSessionPath(alias, this);
        }

        @Override
        public GameSessionPath as(Table<?> alias) {
            return new GameSessionPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Gamedata.GAMEDATA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.GAME_SESSION_FK_GAME_SESSION_GAME_VERSION1_IDX, Indexes.GAME_SESSION_FK_GAME_SESSION_ORGANIZATION1_IDX);
    }

    @Override
    public Identity<GameSessionRecord, Integer> getIdentity() {
        return (Identity<GameSessionRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<GameSessionRecord> getPrimaryKey() {
        return Keys.KEY_GAME_SESSION_PRIMARY;
    }

    @Override
    public List<UniqueKey<GameSessionRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_GAME_SESSION_ID_UNIQUE, Keys.KEY_GAME_SESSION_SESSION_TOKEN_UNIQUE);
    }

    @Override
    public List<ForeignKey<GameSessionRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_GAME_SESSION_GAME_VERSION1, Keys.FK_GAME_SESSION_ORGANIZATION1);
    }

    private transient GameVersionPath _gameVersion;

    /**
     * Get the implicit join path to the <code>gamedata.game_version</code>
     * table.
     */
    public GameVersionPath gameVersion() {
        if (_gameVersion == null)
            _gameVersion = new GameVersionPath(this, Keys.FK_GAME_SESSION_GAME_VERSION1, null);

        return _gameVersion;
    }

    private transient OrganizationPath _organization;

    /**
     * Get the implicit join path to the <code>gamedata.organization</code>
     * table.
     */
    public OrganizationPath organization() {
        if (_organization == null)
            _organization = new OrganizationPath(this, Keys.FK_GAME_SESSION_ORGANIZATION1, null);

        return _organization;
    }

    private transient DashboardSessionPath _dashboardSession;

    /**
     * Get the implicit to-many join path to the
     * <code>gamedata.dashboard_session</code> table
     */
    public DashboardSessionPath dashboardSession() {
        if (_dashboardSession == null)
            _dashboardSession = new DashboardSessionPath(this, null, Keys.FK_DASHBOARD_SESSION_GAME_SESSION1.getInverseKey());

        return _dashboardSession;
    }

    private transient GameSessionRolePath _gameSessionRole;

    /**
     * Get the implicit to-many join path to the
     * <code>gamedata.game_session_role</code> table
     */
    public GameSessionRolePath gameSessionRole() {
        if (_gameSessionRole == null)
            _gameSessionRole = new GameSessionRolePath(this, null, Keys.FK_GAME_SESSION_ROLE_GAME_SESSION1.getInverseKey());

        return _gameSessionRole;
    }

    private transient GroupPath _group;

    /**
     * Get the implicit to-many join path to the <code>gamedata.group</code>
     * table
     */
    public GroupPath group() {
        if (_group == null)
            _group = new GroupPath(this, null, Keys.FK_GROUP_GAME_SESSION1.getInverseKey());

        return _group;
    }

    private transient MissionEventPath _missionEvent;

    /**
     * Get the implicit to-many join path to the
     * <code>gamedata.mission_event</code> table
     */
    public MissionEventPath missionEvent() {
        if (_missionEvent == null)
            _missionEvent = new MissionEventPath(this, null, Keys.FK_MISSION_EVENT_GAME_SESSION1.getInverseKey());

        return _missionEvent;
    }

    private transient PlayerPath _player;

    /**
     * Get the implicit to-many join path to the <code>gamedata.player</code>
     * table
     */
    public PlayerPath player() {
        if (_player == null)
            _player = new PlayerPath(this, null, Keys.FK_PLAYER_GAME_SESSION1.getInverseKey());

        return _player;
    }

    @Override
    public GameSession as(String alias) {
        return new GameSession(DSL.name(alias), this);
    }

    @Override
    public GameSession as(Name alias) {
        return new GameSession(alias, this);
    }

    @Override
    public GameSession as(Table<?> alias) {
        return new GameSession(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public GameSession rename(String name) {
        return new GameSession(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public GameSession rename(Name name) {
        return new GameSession(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public GameSession rename(Table<?> name) {
        return new GameSession(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public GameSession where(Condition condition) {
        return new GameSession(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public GameSession where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public GameSession where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public GameSession where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public GameSession where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public GameSession where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public GameSession where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public GameSession where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public GameSession whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public GameSession whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
