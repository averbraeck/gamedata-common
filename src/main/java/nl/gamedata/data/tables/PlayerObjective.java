/*
 * This file is generated by jOOQ.
 */
package nl.gamedata.data.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import nl.gamedata.data.Gamedata;
import nl.gamedata.data.Indexes;
import nl.gamedata.data.Keys;
import nl.gamedata.data.tables.records.PlayerObjectiveRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PlayerObjective extends TableImpl<PlayerObjectiveRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>gamedata.player_objective</code>
     */
    public static final PlayerObjective PLAYER_OBJECTIVE = new PlayerObjective();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PlayerObjectiveRecord> getRecordType() {
        return PlayerObjectiveRecord.class;
    }

    /**
     * The column <code>gamedata.player_objective.id</code>.
     */
    public final TableField<PlayerObjectiveRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>gamedata.player_objective.name</code>.
     */
    public final TableField<PlayerObjectiveRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>gamedata.player_objective.threshold</code>.
     */
    public final TableField<PlayerObjectiveRecord, String> THRESHOLD = createField(DSL.name("threshold"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>gamedata.player_objective.game_mission_id</code>.
     */
    public final TableField<PlayerObjectiveRecord, Integer> GAME_MISSION_ID = createField(DSL.name("game_mission_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>gamedata.player_objective.scale_id</code>.
     */
    public final TableField<PlayerObjectiveRecord, Integer> SCALE_ID = createField(DSL.name("scale_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private PlayerObjective(Name alias, Table<PlayerObjectiveRecord> aliased) {
        this(alias, aliased, null);
    }

    private PlayerObjective(Name alias, Table<PlayerObjectiveRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>gamedata.player_objective</code> table reference
     */
    public PlayerObjective(String alias) {
        this(DSL.name(alias), PLAYER_OBJECTIVE);
    }

    /**
     * Create an aliased <code>gamedata.player_objective</code> table reference
     */
    public PlayerObjective(Name alias) {
        this(alias, PLAYER_OBJECTIVE);
    }

    /**
     * Create a <code>gamedata.player_objective</code> table reference
     */
    public PlayerObjective() {
        this(DSL.name("player_objective"), null);
    }

    public <O extends Record> PlayerObjective(Table<O> child, ForeignKey<O, PlayerObjectiveRecord> key) {
        super(child, key, PLAYER_OBJECTIVE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Gamedata.GAMEDATA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.PLAYER_OBJECTIVE_FK_PLAYER_OBJECTIVE_GAME_MISSION1_IDX, Indexes.PLAYER_OBJECTIVE_FK_PLAYER_OBJECTIVE_SCALE1_IDX);
    }

    @Override
    public Identity<PlayerObjectiveRecord, Integer> getIdentity() {
        return (Identity<PlayerObjectiveRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<PlayerObjectiveRecord> getPrimaryKey() {
        return Keys.KEY_PLAYER_OBJECTIVE_PRIMARY;
    }

    @Override
    public List<UniqueKey<PlayerObjectiveRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_PLAYER_OBJECTIVE_ID_UNIQUE);
    }

    @Override
    public List<ForeignKey<PlayerObjectiveRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_PLAYER_OBJECTIVE_GAME_MISSION1, Keys.FK_PLAYER_OBJECTIVE_SCALE1);
    }

    private transient GameMission _gameMission;
    private transient Scale _scale;

    /**
     * Get the implicit join path to the <code>gamedata.game_mission</code>
     * table.
     */
    public GameMission gameMission() {
        if (_gameMission == null)
            _gameMission = new GameMission(this, Keys.FK_PLAYER_OBJECTIVE_GAME_MISSION1);

        return _gameMission;
    }

    /**
     * Get the implicit join path to the <code>gamedata.scale</code> table.
     */
    public Scale scale() {
        if (_scale == null)
            _scale = new Scale(this, Keys.FK_PLAYER_OBJECTIVE_SCALE1);

        return _scale;
    }

    @Override
    public PlayerObjective as(String alias) {
        return new PlayerObjective(DSL.name(alias), this);
    }

    @Override
    public PlayerObjective as(Name alias) {
        return new PlayerObjective(alias, this);
    }

    @Override
    public PlayerObjective as(Table<?> alias) {
        return new PlayerObjective(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PlayerObjective rename(String name) {
        return new PlayerObjective(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PlayerObjective rename(Name name) {
        return new PlayerObjective(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PlayerObjective rename(Table<?> name) {
        return new PlayerObjective(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, String, String, Integer, Integer> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super Integer, ? super String, ? super String, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super Integer, ? super String, ? super String, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
