/*
 * This file is generated by jOOQ.
 */
package nl.gamedata.data.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import nl.gamedata.data.Gamedata;
import nl.gamedata.data.Indexes;
import nl.gamedata.data.Keys;
import nl.gamedata.data.tables.LearningGoal.LearningGoalPath;
import nl.gamedata.data.tables.PlayerScore.PlayerScorePath;
import nl.gamedata.data.tables.Scale.ScalePath;
import nl.gamedata.data.tables.records.PlayerObjectiveRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PlayerObjective extends TableImpl<PlayerObjectiveRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>gamedata.player_objective</code>
     */
    public static final PlayerObjective PLAYER_OBJECTIVE = new PlayerObjective();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PlayerObjectiveRecord> getRecordType() {
        return PlayerObjectiveRecord.class;
    }

    /**
     * The column <code>gamedata.player_objective.id</code>.
     */
    public final TableField<PlayerObjectiveRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>gamedata.player_objective.code</code>.
     */
    public final TableField<PlayerObjectiveRecord, String> CODE = createField(DSL.name("code"), SQLDataType.VARCHAR(16).nullable(false), this, "");

    /**
     * The column <code>gamedata.player_objective.name</code>.
     */
    public final TableField<PlayerObjectiveRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>gamedata.player_objective.description</code>.
     */
    public final TableField<PlayerObjectiveRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>gamedata.player_objective.threshold</code>.
     */
    public final TableField<PlayerObjectiveRecord, String> THRESHOLD = createField(DSL.name("threshold"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>gamedata.player_objective.scale_id</code>.
     */
    public final TableField<PlayerObjectiveRecord, Integer> SCALE_ID = createField(DSL.name("scale_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>gamedata.player_objective.learning_goal_id</code>.
     */
    public final TableField<PlayerObjectiveRecord, Integer> LEARNING_GOAL_ID = createField(DSL.name("learning_goal_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private PlayerObjective(Name alias, Table<PlayerObjectiveRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private PlayerObjective(Name alias, Table<PlayerObjectiveRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>gamedata.player_objective</code> table reference
     */
    public PlayerObjective(String alias) {
        this(DSL.name(alias), PLAYER_OBJECTIVE);
    }

    /**
     * Create an aliased <code>gamedata.player_objective</code> table reference
     */
    public PlayerObjective(Name alias) {
        this(alias, PLAYER_OBJECTIVE);
    }

    /**
     * Create a <code>gamedata.player_objective</code> table reference
     */
    public PlayerObjective() {
        this(DSL.name("player_objective"), null);
    }

    public <O extends Record> PlayerObjective(Table<O> path, ForeignKey<O, PlayerObjectiveRecord> childPath, InverseForeignKey<O, PlayerObjectiveRecord> parentPath) {
        super(path, childPath, parentPath, PLAYER_OBJECTIVE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class PlayerObjectivePath extends PlayerObjective implements Path<PlayerObjectiveRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> PlayerObjectivePath(Table<O> path, ForeignKey<O, PlayerObjectiveRecord> childPath, InverseForeignKey<O, PlayerObjectiveRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private PlayerObjectivePath(Name alias, Table<PlayerObjectiveRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public PlayerObjectivePath as(String alias) {
            return new PlayerObjectivePath(DSL.name(alias), this);
        }

        @Override
        public PlayerObjectivePath as(Name alias) {
            return new PlayerObjectivePath(alias, this);
        }

        @Override
        public PlayerObjectivePath as(Table<?> alias) {
            return new PlayerObjectivePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Gamedata.GAMEDATA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.PLAYER_OBJECTIVE_FK_PLAYER_OBJECTIVE_LEARNING_GOAL1_IDX, Indexes.PLAYER_OBJECTIVE_FK_PLAYER_OBJECTIVE_SCALE1_IDX);
    }

    @Override
    public Identity<PlayerObjectiveRecord, Integer> getIdentity() {
        return (Identity<PlayerObjectiveRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<PlayerObjectiveRecord> getPrimaryKey() {
        return Keys.KEY_PLAYER_OBJECTIVE_PRIMARY;
    }

    @Override
    public List<UniqueKey<PlayerObjectiveRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_PLAYER_OBJECTIVE_ID_UNIQUE);
    }

    @Override
    public List<ForeignKey<PlayerObjectiveRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_PLAYER_OBJECTIVE_LEARNING_GOAL1, Keys.FK_PLAYER_OBJECTIVE_SCALE1);
    }

    private transient LearningGoalPath _learningGoal;

    /**
     * Get the implicit join path to the <code>gamedata.learning_goal</code>
     * table.
     */
    public LearningGoalPath learningGoal() {
        if (_learningGoal == null)
            _learningGoal = new LearningGoalPath(this, Keys.FK_PLAYER_OBJECTIVE_LEARNING_GOAL1, null);

        return _learningGoal;
    }

    private transient ScalePath _scale;

    /**
     * Get the implicit join path to the <code>gamedata.scale</code> table.
     */
    public ScalePath scale() {
        if (_scale == null)
            _scale = new ScalePath(this, Keys.FK_PLAYER_OBJECTIVE_SCALE1, null);

        return _scale;
    }

    private transient PlayerScorePath _playerScore;

    /**
     * Get the implicit to-many join path to the
     * <code>gamedata.player_score</code> table
     */
    public PlayerScorePath playerScore() {
        if (_playerScore == null)
            _playerScore = new PlayerScorePath(this, null, Keys.FK_PLAYER_SCORE_PLAYER_OBJECTIVE1.getInverseKey());

        return _playerScore;
    }

    @Override
    public PlayerObjective as(String alias) {
        return new PlayerObjective(DSL.name(alias), this);
    }

    @Override
    public PlayerObjective as(Name alias) {
        return new PlayerObjective(alias, this);
    }

    @Override
    public PlayerObjective as(Table<?> alias) {
        return new PlayerObjective(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PlayerObjective rename(String name) {
        return new PlayerObjective(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PlayerObjective rename(Name name) {
        return new PlayerObjective(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PlayerObjective rename(Table<?> name) {
        return new PlayerObjective(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PlayerObjective where(Condition condition) {
        return new PlayerObjective(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PlayerObjective where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PlayerObjective where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PlayerObjective where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PlayerObjective where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PlayerObjective where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PlayerObjective where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PlayerObjective where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PlayerObjective whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PlayerObjective whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
