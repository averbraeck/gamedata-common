/*
 * This file is generated by jOOQ.
 */
package nl.gamedata.data.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import nl.gamedata.data.Gamedata;
import nl.gamedata.data.Keys;
import nl.gamedata.data.tables.records.ErrorRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function11;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Error extends TableImpl<ErrorRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>gamedata.error</code>
     */
    public static final Error ERROR = new Error();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ErrorRecord> getRecordType() {
        return ErrorRecord.class;
    }

    /**
     * The column <code>gamedata.error.id</code>.
     */
    public final TableField<ErrorRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>gamedata.error.timestamp</code>.
     */
    public final TableField<ErrorRecord, LocalDateTime> TIMESTAMP = createField(DSL.name("timestamp"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "");

    /**
     * The column <code>gamedata.error.error_type</code>.
     */
    public final TableField<ErrorRecord, String> ERROR_TYPE = createField(DSL.name("error_type"), SQLDataType.VARCHAR(16).nullable(false), this, "");

    /**
     * The column <code>gamedata.error.record_stored</code>.
     */
    public final TableField<ErrorRecord, Byte> RECORD_STORED = createField(DSL.name("record_stored"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>gamedata.error.message</code>.
     */
    public final TableField<ErrorRecord, String> MESSAGE = createField(DSL.name("message"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>gamedata.error.content</code>.
     */
    public final TableField<ErrorRecord, String> CONTENT = createField(DSL.name("content"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>gamedata.error.data_type</code>.
     */
    public final TableField<ErrorRecord, String> DATA_TYPE = createField(DSL.name("data_type"), SQLDataType.VARCHAR(45).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>gamedata.error.session_token</code>.
     */
    public final TableField<ErrorRecord, String> SESSION_TOKEN = createField(DSL.name("session_token"), SQLDataType.VARCHAR(45).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>gamedata.error.game_session_code</code>.
     */
    public final TableField<ErrorRecord, String> GAME_SESSION_CODE = createField(DSL.name("game_session_code"), SQLDataType.VARCHAR(45).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>gamedata.error.game_version_code</code>.
     */
    public final TableField<ErrorRecord, String> GAME_VERSION_CODE = createField(DSL.name("game_version_code"), SQLDataType.VARCHAR(45).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>gamedata.error.organization_code</code>.
     */
    public final TableField<ErrorRecord, String> ORGANIZATION_CODE = createField(DSL.name("organization_code"), SQLDataType.VARCHAR(45).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

    private Error(Name alias, Table<ErrorRecord> aliased) {
        this(alias, aliased, null);
    }

    private Error(Name alias, Table<ErrorRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>gamedata.error</code> table reference
     */
    public Error(String alias) {
        this(DSL.name(alias), ERROR);
    }

    /**
     * Create an aliased <code>gamedata.error</code> table reference
     */
    public Error(Name alias) {
        this(alias, ERROR);
    }

    /**
     * Create a <code>gamedata.error</code> table reference
     */
    public Error() {
        this(DSL.name("error"), null);
    }

    public <O extends Record> Error(Table<O> child, ForeignKey<O, ErrorRecord> key) {
        super(child, key, ERROR);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Gamedata.GAMEDATA;
    }

    @Override
    public Identity<ErrorRecord, Integer> getIdentity() {
        return (Identity<ErrorRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ErrorRecord> getPrimaryKey() {
        return Keys.KEY_ERROR_PRIMARY;
    }

    @Override
    public List<UniqueKey<ErrorRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_ERROR_ID_UNIQUE);
    }

    @Override
    public Error as(String alias) {
        return new Error(DSL.name(alias), this);
    }

    @Override
    public Error as(Name alias) {
        return new Error(alias, this);
    }

    @Override
    public Error as(Table<?> alias) {
        return new Error(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Error rename(String name) {
        return new Error(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Error rename(Name name) {
        return new Error(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Error rename(Table<?> name) {
        return new Error(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<Integer, LocalDateTime, String, Byte, String, String, String, String, String, String, String> fieldsRow() {
        return (Row11) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function11<? super Integer, ? super LocalDateTime, ? super String, ? super Byte, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function11<? super Integer, ? super LocalDateTime, ? super String, ? super Byte, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
