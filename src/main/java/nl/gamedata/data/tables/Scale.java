/*
 * This file is generated by jOOQ.
 */
package nl.gamedata.data.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import nl.gamedata.data.Gamedata;
import nl.gamedata.data.Keys;
import nl.gamedata.data.tables.records.ScaleRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Scale extends TableImpl<ScaleRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>gamedata.scale</code>
     */
    public static final Scale SCALE = new Scale();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ScaleRecord> getRecordType() {
        return ScaleRecord.class;
    }

    /**
     * The column <code>gamedata.scale.id</code>.
     */
    public final TableField<ScaleRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>gamedata.scale.type</code>.
     */
    public final TableField<ScaleRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>gamedata.scale.min_value</code>.
     */
    public final TableField<ScaleRecord, Double> MIN_VALUE = createField(DSL.name("min_value"), SQLDataType.FLOAT.defaultValue(DSL.field(DSL.raw("0"), SQLDataType.FLOAT)), this, "");

    /**
     * The column <code>gamedata.scale.max_value</code>.
     */
    public final TableField<ScaleRecord, Double> MAX_VALUE = createField(DSL.name("max_value"), SQLDataType.FLOAT.defaultValue(DSL.field(DSL.raw("100"), SQLDataType.FLOAT)), this, "");

    /**
     * The column <code>gamedata.scale.value_list</code>.
     */
    public final TableField<ScaleRecord, String> VALUE_LIST = createField(DSL.name("value_list"), SQLDataType.VARCHAR(512).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>gamedata.scale.value_scores</code>.
     */
    public final TableField<ScaleRecord, String> VALUE_SCORES = createField(DSL.name("value_scores"), SQLDataType.VARCHAR(512).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

    private Scale(Name alias, Table<ScaleRecord> aliased) {
        this(alias, aliased, null);
    }

    private Scale(Name alias, Table<ScaleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>gamedata.scale</code> table reference
     */
    public Scale(String alias) {
        this(DSL.name(alias), SCALE);
    }

    /**
     * Create an aliased <code>gamedata.scale</code> table reference
     */
    public Scale(Name alias) {
        this(alias, SCALE);
    }

    /**
     * Create a <code>gamedata.scale</code> table reference
     */
    public Scale() {
        this(DSL.name("scale"), null);
    }

    public <O extends Record> Scale(Table<O> child, ForeignKey<O, ScaleRecord> key) {
        super(child, key, SCALE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Gamedata.GAMEDATA;
    }

    @Override
    public Identity<ScaleRecord, Integer> getIdentity() {
        return (Identity<ScaleRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ScaleRecord> getPrimaryKey() {
        return Keys.KEY_SCALE_PRIMARY;
    }

    @Override
    public List<UniqueKey<ScaleRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_SCALE_ID_UNIQUE);
    }

    @Override
    public Scale as(String alias) {
        return new Scale(DSL.name(alias), this);
    }

    @Override
    public Scale as(Name alias) {
        return new Scale(alias, this);
    }

    @Override
    public Scale as(Table<?> alias) {
        return new Scale(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Scale rename(String name) {
        return new Scale(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Scale rename(Name name) {
        return new Scale(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Scale rename(Table<?> name) {
        return new Scale(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, String, Double, Double, String, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super Integer, ? super String, ? super Double, ? super Double, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super Integer, ? super String, ? super Double, ? super Double, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
