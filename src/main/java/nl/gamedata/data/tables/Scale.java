/*
 * This file is generated by jOOQ.
 */
package nl.gamedata.data.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import nl.gamedata.data.Gamedata;
import nl.gamedata.data.Indexes;
import nl.gamedata.data.Keys;
import nl.gamedata.data.tables.Game.GamePath;
import nl.gamedata.data.tables.GroupObjective.GroupObjectivePath;
import nl.gamedata.data.tables.GroupScore.GroupScorePath;
import nl.gamedata.data.tables.PlayerObjective.PlayerObjectivePath;
import nl.gamedata.data.tables.PlayerScore.PlayerScorePath;
import nl.gamedata.data.tables.records.ScaleRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Scale extends TableImpl<ScaleRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>gamedata.scale</code>
     */
    public static final Scale SCALE = new Scale();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ScaleRecord> getRecordType() {
        return ScaleRecord.class;
    }

    /**
     * The column <code>gamedata.scale.id</code>.
     */
    public final TableField<ScaleRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>gamedata.scale.type</code>.
     */
    public final TableField<ScaleRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>gamedata.scale.min_value</code>.
     */
    public final TableField<ScaleRecord, Double> MIN_VALUE = createField(DSL.name("min_value"), SQLDataType.FLOAT.defaultValue(DSL.field(DSL.raw("0"), SQLDataType.FLOAT)), this, "");

    /**
     * The column <code>gamedata.scale.max_value</code>.
     */
    public final TableField<ScaleRecord, Double> MAX_VALUE = createField(DSL.name("max_value"), SQLDataType.FLOAT.defaultValue(DSL.field(DSL.raw("100"), SQLDataType.FLOAT)), this, "");

    /**
     * The column <code>gamedata.scale.value_list</code>.
     */
    public final TableField<ScaleRecord, String> VALUE_LIST = createField(DSL.name("value_list"), SQLDataType.VARCHAR(512).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>gamedata.scale.value_scores</code>.
     */
    public final TableField<ScaleRecord, String> VALUE_SCORES = createField(DSL.name("value_scores"), SQLDataType.VARCHAR(512).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>gamedata.scale.game_id</code>.
     */
    public final TableField<ScaleRecord, Integer> GAME_ID = createField(DSL.name("game_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private Scale(Name alias, Table<ScaleRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Scale(Name alias, Table<ScaleRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>gamedata.scale</code> table reference
     */
    public Scale(String alias) {
        this(DSL.name(alias), SCALE);
    }

    /**
     * Create an aliased <code>gamedata.scale</code> table reference
     */
    public Scale(Name alias) {
        this(alias, SCALE);
    }

    /**
     * Create a <code>gamedata.scale</code> table reference
     */
    public Scale() {
        this(DSL.name("scale"), null);
    }

    public <O extends Record> Scale(Table<O> path, ForeignKey<O, ScaleRecord> childPath, InverseForeignKey<O, ScaleRecord> parentPath) {
        super(path, childPath, parentPath, SCALE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ScalePath extends Scale implements Path<ScaleRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> ScalePath(Table<O> path, ForeignKey<O, ScaleRecord> childPath, InverseForeignKey<O, ScaleRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ScalePath(Name alias, Table<ScaleRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ScalePath as(String alias) {
            return new ScalePath(DSL.name(alias), this);
        }

        @Override
        public ScalePath as(Name alias) {
            return new ScalePath(alias, this);
        }

        @Override
        public ScalePath as(Table<?> alias) {
            return new ScalePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Gamedata.GAMEDATA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.SCALE_FK_SCALE_GAME1_IDX);
    }

    @Override
    public Identity<ScaleRecord, Integer> getIdentity() {
        return (Identity<ScaleRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ScaleRecord> getPrimaryKey() {
        return Keys.KEY_SCALE_PRIMARY;
    }

    @Override
    public List<UniqueKey<ScaleRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_SCALE_ID_UNIQUE, Keys.KEY_SCALE_TYPE_UNIQUE);
    }

    @Override
    public List<ForeignKey<ScaleRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_SCALE_GAME1);
    }

    private transient GamePath _game;

    /**
     * Get the implicit join path to the <code>gamedata.game</code> table.
     */
    public GamePath game() {
        if (_game == null)
            _game = new GamePath(this, Keys.FK_SCALE_GAME1, null);

        return _game;
    }

    private transient GroupObjectivePath _groupObjective;

    /**
     * Get the implicit to-many join path to the
     * <code>gamedata.group_objective</code> table
     */
    public GroupObjectivePath groupObjective() {
        if (_groupObjective == null)
            _groupObjective = new GroupObjectivePath(this, null, Keys.FK_GROUP_OBJECTIVE_SCALE1.getInverseKey());

        return _groupObjective;
    }

    private transient GroupScorePath _groupScore;

    /**
     * Get the implicit to-many join path to the
     * <code>gamedata.group_score</code> table
     */
    public GroupScorePath groupScore() {
        if (_groupScore == null)
            _groupScore = new GroupScorePath(this, null, Keys.FK_GROUP_SCORE_SCALE1.getInverseKey());

        return _groupScore;
    }

    private transient PlayerObjectivePath _playerObjective;

    /**
     * Get the implicit to-many join path to the
     * <code>gamedata.player_objective</code> table
     */
    public PlayerObjectivePath playerObjective() {
        if (_playerObjective == null)
            _playerObjective = new PlayerObjectivePath(this, null, Keys.FK_PLAYER_OBJECTIVE_SCALE1.getInverseKey());

        return _playerObjective;
    }

    private transient PlayerScorePath _playerScore;

    /**
     * Get the implicit to-many join path to the
     * <code>gamedata.player_score</code> table
     */
    public PlayerScorePath playerScore() {
        if (_playerScore == null)
            _playerScore = new PlayerScorePath(this, null, Keys.FK_PLAYER_SCORE_SCALE1.getInverseKey());

        return _playerScore;
    }

    @Override
    public Scale as(String alias) {
        return new Scale(DSL.name(alias), this);
    }

    @Override
    public Scale as(Name alias) {
        return new Scale(alias, this);
    }

    @Override
    public Scale as(Table<?> alias) {
        return new Scale(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Scale rename(String name) {
        return new Scale(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Scale rename(Name name) {
        return new Scale(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Scale rename(Table<?> name) {
        return new Scale(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Scale where(Condition condition) {
        return new Scale(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Scale where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Scale where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Scale where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Scale where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Scale where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Scale where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Scale where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Scale whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Scale whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
