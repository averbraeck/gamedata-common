/*
 * This file is generated by jOOQ.
 */
package nl.gamedata.data.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import nl.gamedata.data.Gamedata;
import nl.gamedata.data.Indexes;
import nl.gamedata.data.Keys;
import nl.gamedata.data.tables.records.PublicDashboardRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PublicDashboard extends TableImpl<PublicDashboardRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>gamedata.public_dashboard</code>
     */
    public static final PublicDashboard PUBLIC_DASHBOARD = new PublicDashboard();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PublicDashboardRecord> getRecordType() {
        return PublicDashboardRecord.class;
    }

    /**
     * The column <code>gamedata.public_dashboard.id</code>.
     */
    public final TableField<PublicDashboardRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>gamedata.public_dashboard.key</code>.
     */
    public final TableField<PublicDashboardRecord, String> KEY = createField(DSL.name("key"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>gamedata.public_dashboard.value</code>.
     */
    public final TableField<PublicDashboardRecord, String> VALUE = createField(DSL.name("value"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>gamedata.public_dashboard.game_mission_id</code>.
     */
    public final TableField<PublicDashboardRecord, Integer> GAME_MISSION_ID = createField(DSL.name("game_mission_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private PublicDashboard(Name alias, Table<PublicDashboardRecord> aliased) {
        this(alias, aliased, null);
    }

    private PublicDashboard(Name alias, Table<PublicDashboardRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>gamedata.public_dashboard</code> table reference
     */
    public PublicDashboard(String alias) {
        this(DSL.name(alias), PUBLIC_DASHBOARD);
    }

    /**
     * Create an aliased <code>gamedata.public_dashboard</code> table reference
     */
    public PublicDashboard(Name alias) {
        this(alias, PUBLIC_DASHBOARD);
    }

    /**
     * Create a <code>gamedata.public_dashboard</code> table reference
     */
    public PublicDashboard() {
        this(DSL.name("public_dashboard"), null);
    }

    public <O extends Record> PublicDashboard(Table<O> child, ForeignKey<O, PublicDashboardRecord> key) {
        super(child, key, PUBLIC_DASHBOARD);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Gamedata.GAMEDATA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.PUBLIC_DASHBOARD_FK_GAME_DASHBOARD_GAME_MISSION1_IDX);
    }

    @Override
    public Identity<PublicDashboardRecord, Integer> getIdentity() {
        return (Identity<PublicDashboardRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<PublicDashboardRecord> getPrimaryKey() {
        return Keys.KEY_PUBLIC_DASHBOARD_PRIMARY;
    }

    @Override
    public List<UniqueKey<PublicDashboardRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_PUBLIC_DASHBOARD_ID_UNIQUE);
    }

    @Override
    public List<ForeignKey<PublicDashboardRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_GAME_DASHBOARD_GAME_MISSION1);
    }

    private transient GameMission _gameMission;

    /**
     * Get the implicit join path to the <code>gamedata.game_mission</code>
     * table.
     */
    public GameMission gameMission() {
        if (_gameMission == null)
            _gameMission = new GameMission(this, Keys.FK_GAME_DASHBOARD_GAME_MISSION1);

        return _gameMission;
    }

    @Override
    public PublicDashboard as(String alias) {
        return new PublicDashboard(DSL.name(alias), this);
    }

    @Override
    public PublicDashboard as(Name alias) {
        return new PublicDashboard(alias, this);
    }

    @Override
    public PublicDashboard as(Table<?> alias) {
        return new PublicDashboard(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PublicDashboard rename(String name) {
        return new PublicDashboard(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PublicDashboard rename(Name name) {
        return new PublicDashboard(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PublicDashboard rename(Table<?> name) {
        return new PublicDashboard(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, String, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Integer, ? super String, ? super String, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Integer, ? super String, ? super String, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
