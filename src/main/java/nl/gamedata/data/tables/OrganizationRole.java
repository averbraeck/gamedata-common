/*
 * This file is generated by jOOQ.
 */
package nl.gamedata.data.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import nl.gamedata.data.Gamedata;
import nl.gamedata.data.Indexes;
import nl.gamedata.data.Keys;
import nl.gamedata.data.tables.Organization.OrganizationPath;
import nl.gamedata.data.tables.User.UserPath;
import nl.gamedata.data.tables.records.OrganizationRoleRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OrganizationRole extends TableImpl<OrganizationRoleRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>gamedata.organization_role</code>
     */
    public static final OrganizationRole ORGANIZATION_ROLE = new OrganizationRole();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OrganizationRoleRecord> getRecordType() {
        return OrganizationRoleRecord.class;
    }

    /**
     * The column <code>gamedata.organization_role.id</code>.
     */
    public final TableField<OrganizationRoleRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>gamedata.organization_role.view</code>.
     */
    public final TableField<OrganizationRoleRecord, Byte> VIEW = createField(DSL.name("view"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>gamedata.organization_role.edit</code>.
     */
    public final TableField<OrganizationRoleRecord, Byte> EDIT = createField(DSL.name("edit"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>gamedata.organization_role.admin</code>.
     */
    public final TableField<OrganizationRoleRecord, Byte> ADMIN = createField(DSL.name("admin"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>gamedata.organization_role.user_id</code>.
     */
    public final TableField<OrganizationRoleRecord, Integer> USER_ID = createField(DSL.name("user_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>gamedata.organization_role.organization_id</code>.
     */
    public final TableField<OrganizationRoleRecord, Integer> ORGANIZATION_ID = createField(DSL.name("organization_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private OrganizationRole(Name alias, Table<OrganizationRoleRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private OrganizationRole(Name alias, Table<OrganizationRoleRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>gamedata.organization_role</code> table reference
     */
    public OrganizationRole(String alias) {
        this(DSL.name(alias), ORGANIZATION_ROLE);
    }

    /**
     * Create an aliased <code>gamedata.organization_role</code> table reference
     */
    public OrganizationRole(Name alias) {
        this(alias, ORGANIZATION_ROLE);
    }

    /**
     * Create a <code>gamedata.organization_role</code> table reference
     */
    public OrganizationRole() {
        this(DSL.name("organization_role"), null);
    }

    public <O extends Record> OrganizationRole(Table<O> path, ForeignKey<O, OrganizationRoleRecord> childPath, InverseForeignKey<O, OrganizationRoleRecord> parentPath) {
        super(path, childPath, parentPath, ORGANIZATION_ROLE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class OrganizationRolePath extends OrganizationRole implements Path<OrganizationRoleRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> OrganizationRolePath(Table<O> path, ForeignKey<O, OrganizationRoleRecord> childPath, InverseForeignKey<O, OrganizationRoleRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private OrganizationRolePath(Name alias, Table<OrganizationRoleRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public OrganizationRolePath as(String alias) {
            return new OrganizationRolePath(DSL.name(alias), this);
        }

        @Override
        public OrganizationRolePath as(Name alias) {
            return new OrganizationRolePath(alias, this);
        }

        @Override
        public OrganizationRolePath as(Table<?> alias) {
            return new OrganizationRolePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Gamedata.GAMEDATA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.ORGANIZATION_ROLE_FK_ORGANIZATION_ROLE_ORGANIZATION1_IDX, Indexes.ORGANIZATION_ROLE_FK_ORGANIZATION_ROLE_USER1_IDX);
    }

    @Override
    public Identity<OrganizationRoleRecord, Integer> getIdentity() {
        return (Identity<OrganizationRoleRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<OrganizationRoleRecord> getPrimaryKey() {
        return Keys.KEY_ORGANIZATION_ROLE_PRIMARY;
    }

    @Override
    public List<UniqueKey<OrganizationRoleRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_ORGANIZATION_ROLE_ID_UNIQUE);
    }

    @Override
    public List<ForeignKey<OrganizationRoleRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_ORGANIZATION_ROLE_ORGANIZATION1, Keys.FK_ORGANIZATION_ROLE_USER1);
    }

    private transient OrganizationPath _organization;

    /**
     * Get the implicit join path to the <code>gamedata.organization</code>
     * table.
     */
    public OrganizationPath organization() {
        if (_organization == null)
            _organization = new OrganizationPath(this, Keys.FK_ORGANIZATION_ROLE_ORGANIZATION1, null);

        return _organization;
    }

    private transient UserPath _user;

    /**
     * Get the implicit join path to the <code>gamedata.user</code> table.
     */
    public UserPath user() {
        if (_user == null)
            _user = new UserPath(this, Keys.FK_ORGANIZATION_ROLE_USER1, null);

        return _user;
    }

    @Override
    public OrganizationRole as(String alias) {
        return new OrganizationRole(DSL.name(alias), this);
    }

    @Override
    public OrganizationRole as(Name alias) {
        return new OrganizationRole(alias, this);
    }

    @Override
    public OrganizationRole as(Table<?> alias) {
        return new OrganizationRole(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public OrganizationRole rename(String name) {
        return new OrganizationRole(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public OrganizationRole rename(Name name) {
        return new OrganizationRole(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public OrganizationRole rename(Table<?> name) {
        return new OrganizationRole(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public OrganizationRole where(Condition condition) {
        return new OrganizationRole(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public OrganizationRole where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public OrganizationRole where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public OrganizationRole where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public OrganizationRole where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public OrganizationRole where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public OrganizationRole where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public OrganizationRole where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public OrganizationRole whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public OrganizationRole whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
