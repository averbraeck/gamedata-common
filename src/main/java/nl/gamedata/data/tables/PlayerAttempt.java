/*
 * This file is generated by jOOQ.
 */
package nl.gamedata.data.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import nl.gamedata.data.Gamedata;
import nl.gamedata.data.Indexes;
import nl.gamedata.data.Keys;
import nl.gamedata.data.tables.GameMission.GameMissionPath;
import nl.gamedata.data.tables.Player.PlayerPath;
import nl.gamedata.data.tables.PlayerEvent.PlayerEventPath;
import nl.gamedata.data.tables.PlayerScore.PlayerScorePath;
import nl.gamedata.data.tables.records.PlayerAttemptRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PlayerAttempt extends TableImpl<PlayerAttemptRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>gamedata.player_attempt</code>
     */
    public static final PlayerAttempt PLAYER_ATTEMPT = new PlayerAttempt();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PlayerAttemptRecord> getRecordType() {
        return PlayerAttemptRecord.class;
    }

    /**
     * The column <code>gamedata.player_attempt.id</code>.
     */
    public final TableField<PlayerAttemptRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>gamedata.player_attempt.attempt_nr</code>.
     */
    public final TableField<PlayerAttemptRecord, Integer> ATTEMPT_NR = createField(DSL.name("attempt_nr"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("1"), SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>gamedata.player_attempt.status</code>.
     */
    public final TableField<PlayerAttemptRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(45).nullable(false).defaultValue(DSL.field(DSL.raw("'UNKNOWN'"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>gamedata.player_attempt.player_id</code>.
     */
    public final TableField<PlayerAttemptRecord, Integer> PLAYER_ID = createField(DSL.name("player_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>gamedata.player_attempt.game_mission_id</code>.
     */
    public final TableField<PlayerAttemptRecord, Integer> GAME_MISSION_ID = createField(DSL.name("game_mission_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private PlayerAttempt(Name alias, Table<PlayerAttemptRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private PlayerAttempt(Name alias, Table<PlayerAttemptRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>gamedata.player_attempt</code> table reference
     */
    public PlayerAttempt(String alias) {
        this(DSL.name(alias), PLAYER_ATTEMPT);
    }

    /**
     * Create an aliased <code>gamedata.player_attempt</code> table reference
     */
    public PlayerAttempt(Name alias) {
        this(alias, PLAYER_ATTEMPT);
    }

    /**
     * Create a <code>gamedata.player_attempt</code> table reference
     */
    public PlayerAttempt() {
        this(DSL.name("player_attempt"), null);
    }

    public <O extends Record> PlayerAttempt(Table<O> path, ForeignKey<O, PlayerAttemptRecord> childPath, InverseForeignKey<O, PlayerAttemptRecord> parentPath) {
        super(path, childPath, parentPath, PLAYER_ATTEMPT);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class PlayerAttemptPath extends PlayerAttempt implements Path<PlayerAttemptRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> PlayerAttemptPath(Table<O> path, ForeignKey<O, PlayerAttemptRecord> childPath, InverseForeignKey<O, PlayerAttemptRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private PlayerAttemptPath(Name alias, Table<PlayerAttemptRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public PlayerAttemptPath as(String alias) {
            return new PlayerAttemptPath(DSL.name(alias), this);
        }

        @Override
        public PlayerAttemptPath as(Name alias) {
            return new PlayerAttemptPath(alias, this);
        }

        @Override
        public PlayerAttemptPath as(Table<?> alias) {
            return new PlayerAttemptPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Gamedata.GAMEDATA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.PLAYER_ATTEMPT_FK_PLAYER_ATTEMPT_GAME_MISSION1_IDX, Indexes.PLAYER_ATTEMPT_FK_PLAYER_ATTEMPT_PLAYER1_IDX);
    }

    @Override
    public Identity<PlayerAttemptRecord, Integer> getIdentity() {
        return (Identity<PlayerAttemptRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<PlayerAttemptRecord> getPrimaryKey() {
        return Keys.KEY_PLAYER_ATTEMPT_PRIMARY;
    }

    @Override
    public List<UniqueKey<PlayerAttemptRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_PLAYER_ATTEMPT_ID_UNIQUE);
    }

    @Override
    public List<ForeignKey<PlayerAttemptRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_PLAYER_ATTEMPT_GAME_MISSION1, Keys.FK_PLAYER_ATTEMPT_PLAYER1);
    }

    private transient GameMissionPath _gameMission;

    /**
     * Get the implicit join path to the <code>gamedata.game_mission</code>
     * table.
     */
    public GameMissionPath gameMission() {
        if (_gameMission == null)
            _gameMission = new GameMissionPath(this, Keys.FK_PLAYER_ATTEMPT_GAME_MISSION1, null);

        return _gameMission;
    }

    private transient PlayerPath _player;

    /**
     * Get the implicit join path to the <code>gamedata.player</code> table.
     */
    public PlayerPath player() {
        if (_player == null)
            _player = new PlayerPath(this, Keys.FK_PLAYER_ATTEMPT_PLAYER1, null);

        return _player;
    }

    private transient PlayerEventPath _playerEvent;

    /**
     * Get the implicit to-many join path to the
     * <code>gamedata.player_event</code> table
     */
    public PlayerEventPath playerEvent() {
        if (_playerEvent == null)
            _playerEvent = new PlayerEventPath(this, null, Keys.FK_PLAYER_EVENT_PLAYER_ATTEMPT1.getInverseKey());

        return _playerEvent;
    }

    private transient PlayerScorePath _playerScore;

    /**
     * Get the implicit to-many join path to the
     * <code>gamedata.player_score</code> table
     */
    public PlayerScorePath playerScore() {
        if (_playerScore == null)
            _playerScore = new PlayerScorePath(this, null, Keys.FK_PLAYER_SCORE_PLAYER_ATTEMPT1.getInverseKey());

        return _playerScore;
    }

    @Override
    public PlayerAttempt as(String alias) {
        return new PlayerAttempt(DSL.name(alias), this);
    }

    @Override
    public PlayerAttempt as(Name alias) {
        return new PlayerAttempt(alias, this);
    }

    @Override
    public PlayerAttempt as(Table<?> alias) {
        return new PlayerAttempt(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PlayerAttempt rename(String name) {
        return new PlayerAttempt(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PlayerAttempt rename(Name name) {
        return new PlayerAttempt(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PlayerAttempt rename(Table<?> name) {
        return new PlayerAttempt(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PlayerAttempt where(Condition condition) {
        return new PlayerAttempt(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PlayerAttempt where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PlayerAttempt where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PlayerAttempt where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PlayerAttempt where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PlayerAttempt where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PlayerAttempt where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PlayerAttempt where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PlayerAttempt whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PlayerAttempt whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
