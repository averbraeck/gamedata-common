/*
 * This file is generated by jOOQ.
 */
package nl.gamedata.data.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import nl.gamedata.data.Gamedata;
import nl.gamedata.data.Keys;
import nl.gamedata.data.tables.records.DashboardLayoutRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DashboardLayout extends TableImpl<DashboardLayoutRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>gamedata.dashboard_layout</code>
     */
    public static final DashboardLayout DASHBOARD_LAYOUT = new DashboardLayout();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DashboardLayoutRecord> getRecordType() {
        return DashboardLayoutRecord.class;
    }

    /**
     * The column <code>gamedata.dashboard_layout.id</code>.
     */
    public final TableField<DashboardLayoutRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>gamedata.dashboard_layout.name</code>.
     */
    public final TableField<DashboardLayoutRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>gamedata.dashboard_layout.description</code>.
     */
    public final TableField<DashboardLayoutRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB.nullable(false), this, "");

    private DashboardLayout(Name alias, Table<DashboardLayoutRecord> aliased) {
        this(alias, aliased, null);
    }

    private DashboardLayout(Name alias, Table<DashboardLayoutRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>gamedata.dashboard_layout</code> table reference
     */
    public DashboardLayout(String alias) {
        this(DSL.name(alias), DASHBOARD_LAYOUT);
    }

    /**
     * Create an aliased <code>gamedata.dashboard_layout</code> table reference
     */
    public DashboardLayout(Name alias) {
        this(alias, DASHBOARD_LAYOUT);
    }

    /**
     * Create a <code>gamedata.dashboard_layout</code> table reference
     */
    public DashboardLayout() {
        this(DSL.name("dashboard_layout"), null);
    }

    public <O extends Record> DashboardLayout(Table<O> child, ForeignKey<O, DashboardLayoutRecord> key) {
        super(child, key, DASHBOARD_LAYOUT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Gamedata.GAMEDATA;
    }

    @Override
    public Identity<DashboardLayoutRecord, Integer> getIdentity() {
        return (Identity<DashboardLayoutRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<DashboardLayoutRecord> getPrimaryKey() {
        return Keys.KEY_DASHBOARD_LAYOUT_PRIMARY;
    }

    @Override
    public List<UniqueKey<DashboardLayoutRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_DASHBOARD_LAYOUT_ID_UNIQUE);
    }

    @Override
    public DashboardLayout as(String alias) {
        return new DashboardLayout(DSL.name(alias), this);
    }

    @Override
    public DashboardLayout as(Name alias) {
        return new DashboardLayout(alias, this);
    }

    @Override
    public DashboardLayout as(Table<?> alias) {
        return new DashboardLayout(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public DashboardLayout rename(String name) {
        return new DashboardLayout(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DashboardLayout rename(Name name) {
        return new DashboardLayout(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public DashboardLayout rename(Table<?> name) {
        return new DashboardLayout(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super Integer, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super Integer, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
