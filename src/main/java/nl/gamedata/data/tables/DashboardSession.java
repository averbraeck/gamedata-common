/*
 * This file is generated by jOOQ.
 */
package nl.gamedata.data.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import nl.gamedata.data.Gamedata;
import nl.gamedata.data.Indexes;
import nl.gamedata.data.Keys;
import nl.gamedata.data.tables.Dashboard.DashboardPath;
import nl.gamedata.data.tables.GameSession.GameSessionPath;
import nl.gamedata.data.tables.records.DashboardSessionRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DashboardSession extends TableImpl<DashboardSessionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>gamedata.dashboard_session</code>
     */
    public static final DashboardSession DASHBOARD_SESSION = new DashboardSession();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DashboardSessionRecord> getRecordType() {
        return DashboardSessionRecord.class;
    }

    /**
     * The column <code>gamedata.dashboard_session.id</code>.
     */
    public final TableField<DashboardSessionRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>gamedata.dashboard_session.name</code>.
     */
    public final TableField<DashboardSessionRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>gamedata.dashboard_session.dashboard_id</code>.
     */
    public final TableField<DashboardSessionRecord, Integer> DASHBOARD_ID = createField(DSL.name("dashboard_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>gamedata.dashboard_session.game_session_id</code>.
     */
    public final TableField<DashboardSessionRecord, Integer> GAME_SESSION_ID = createField(DSL.name("game_session_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private DashboardSession(Name alias, Table<DashboardSessionRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private DashboardSession(Name alias, Table<DashboardSessionRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>gamedata.dashboard_session</code> table reference
     */
    public DashboardSession(String alias) {
        this(DSL.name(alias), DASHBOARD_SESSION);
    }

    /**
     * Create an aliased <code>gamedata.dashboard_session</code> table reference
     */
    public DashboardSession(Name alias) {
        this(alias, DASHBOARD_SESSION);
    }

    /**
     * Create a <code>gamedata.dashboard_session</code> table reference
     */
    public DashboardSession() {
        this(DSL.name("dashboard_session"), null);
    }

    public <O extends Record> DashboardSession(Table<O> path, ForeignKey<O, DashboardSessionRecord> childPath, InverseForeignKey<O, DashboardSessionRecord> parentPath) {
        super(path, childPath, parentPath, DASHBOARD_SESSION);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class DashboardSessionPath extends DashboardSession implements Path<DashboardSessionRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> DashboardSessionPath(Table<O> path, ForeignKey<O, DashboardSessionRecord> childPath, InverseForeignKey<O, DashboardSessionRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private DashboardSessionPath(Name alias, Table<DashboardSessionRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public DashboardSessionPath as(String alias) {
            return new DashboardSessionPath(DSL.name(alias), this);
        }

        @Override
        public DashboardSessionPath as(Name alias) {
            return new DashboardSessionPath(alias, this);
        }

        @Override
        public DashboardSessionPath as(Table<?> alias) {
            return new DashboardSessionPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Gamedata.GAMEDATA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.DASHBOARD_SESSION_FK_DASHBOARD_SESSION_DASHBOARD1_IDX, Indexes.DASHBOARD_SESSION_FK_DASHBOARD_SESSION_GAME_SESSION1_IDX);
    }

    @Override
    public Identity<DashboardSessionRecord, Integer> getIdentity() {
        return (Identity<DashboardSessionRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<DashboardSessionRecord> getPrimaryKey() {
        return Keys.KEY_DASHBOARD_SESSION_PRIMARY;
    }

    @Override
    public List<UniqueKey<DashboardSessionRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_DASHBOARD_SESSION_ID_UNIQUE);
    }

    @Override
    public List<ForeignKey<DashboardSessionRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_DASHBOARD_SESSION_DASHBOARD1, Keys.FK_DASHBOARD_SESSION_GAME_SESSION1);
    }

    private transient DashboardPath _dashboard;

    /**
     * Get the implicit join path to the <code>gamedata.dashboard</code> table.
     */
    public DashboardPath dashboard() {
        if (_dashboard == null)
            _dashboard = new DashboardPath(this, Keys.FK_DASHBOARD_SESSION_DASHBOARD1, null);

        return _dashboard;
    }

    private transient GameSessionPath _gameSession;

    /**
     * Get the implicit join path to the <code>gamedata.game_session</code>
     * table.
     */
    public GameSessionPath gameSession() {
        if (_gameSession == null)
            _gameSession = new GameSessionPath(this, Keys.FK_DASHBOARD_SESSION_GAME_SESSION1, null);

        return _gameSession;
    }

    @Override
    public DashboardSession as(String alias) {
        return new DashboardSession(DSL.name(alias), this);
    }

    @Override
    public DashboardSession as(Name alias) {
        return new DashboardSession(alias, this);
    }

    @Override
    public DashboardSession as(Table<?> alias) {
        return new DashboardSession(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public DashboardSession rename(String name) {
        return new DashboardSession(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DashboardSession rename(Name name) {
        return new DashboardSession(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public DashboardSession rename(Table<?> name) {
        return new DashboardSession(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DashboardSession where(Condition condition) {
        return new DashboardSession(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DashboardSession where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DashboardSession where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DashboardSession where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DashboardSession where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DashboardSession where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DashboardSession where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DashboardSession where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DashboardSession whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DashboardSession whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
