/*
 * This file is generated by jOOQ.
 */
package nl.gamedata.data.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import nl.gamedata.data.Gamedata;
import nl.gamedata.data.Indexes;
import nl.gamedata.data.Keys;
import nl.gamedata.data.tables.records.TemplateElementRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TemplateElement extends TableImpl<TemplateElementRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>gamedata.template_element</code>
     */
    public static final TemplateElement TEMPLATE_ELEMENT = new TemplateElement();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TemplateElementRecord> getRecordType() {
        return TemplateElementRecord.class;
    }

    /**
     * The column <code>gamedata.template_element.id</code>.
     */
    public final TableField<TemplateElementRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>gamedata.template_element.dashboard_element_id</code>.
     */
    public final TableField<TemplateElementRecord, Integer> DASHBOARD_ELEMENT_ID = createField(DSL.name("dashboard_element_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>gamedata.template_element.dashboard_template_id</code>.
     */
    public final TableField<TemplateElementRecord, Integer> DASHBOARD_TEMPLATE_ID = createField(DSL.name("dashboard_template_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private TemplateElement(Name alias, Table<TemplateElementRecord> aliased) {
        this(alias, aliased, null);
    }

    private TemplateElement(Name alias, Table<TemplateElementRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>gamedata.template_element</code> table reference
     */
    public TemplateElement(String alias) {
        this(DSL.name(alias), TEMPLATE_ELEMENT);
    }

    /**
     * Create an aliased <code>gamedata.template_element</code> table reference
     */
    public TemplateElement(Name alias) {
        this(alias, TEMPLATE_ELEMENT);
    }

    /**
     * Create a <code>gamedata.template_element</code> table reference
     */
    public TemplateElement() {
        this(DSL.name("template_element"), null);
    }

    public <O extends Record> TemplateElement(Table<O> child, ForeignKey<O, TemplateElementRecord> key) {
        super(child, key, TEMPLATE_ELEMENT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Gamedata.GAMEDATA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.TEMPLATE_ELEMENT_FK_TEMPLATE_ELEMENT_DASHBOARD_ELEMENT1_IDX, Indexes.TEMPLATE_ELEMENT_FK_TEMPLATE_ELEMENT_DASHBOARD_TEMPLATE1_IDX);
    }

    @Override
    public Identity<TemplateElementRecord, Integer> getIdentity() {
        return (Identity<TemplateElementRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<TemplateElementRecord> getPrimaryKey() {
        return Keys.KEY_TEMPLATE_ELEMENT_PRIMARY;
    }

    @Override
    public List<UniqueKey<TemplateElementRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_TEMPLATE_ELEMENT_ID_UNIQUE);
    }

    @Override
    public List<ForeignKey<TemplateElementRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_TEMPLATE_ELEMENT_DASHBOARD_ELEMENT1, Keys.FK_TEMPLATE_ELEMENT_DASHBOARD_TEMPLATE1);
    }

    private transient DashboardElement _dashboardElement;
    private transient DashboardTemplate _dashboardTemplate;

    /**
     * Get the implicit join path to the <code>gamedata.dashboard_element</code>
     * table.
     */
    public DashboardElement dashboardElement() {
        if (_dashboardElement == null)
            _dashboardElement = new DashboardElement(this, Keys.FK_TEMPLATE_ELEMENT_DASHBOARD_ELEMENT1);

        return _dashboardElement;
    }

    /**
     * Get the implicit join path to the
     * <code>gamedata.dashboard_template</code> table.
     */
    public DashboardTemplate dashboardTemplate() {
        if (_dashboardTemplate == null)
            _dashboardTemplate = new DashboardTemplate(this, Keys.FK_TEMPLATE_ELEMENT_DASHBOARD_TEMPLATE1);

        return _dashboardTemplate;
    }

    @Override
    public TemplateElement as(String alias) {
        return new TemplateElement(DSL.name(alias), this);
    }

    @Override
    public TemplateElement as(Name alias) {
        return new TemplateElement(alias, this);
    }

    @Override
    public TemplateElement as(Table<?> alias) {
        return new TemplateElement(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TemplateElement rename(String name) {
        return new TemplateElement(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TemplateElement rename(Name name) {
        return new TemplateElement(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TemplateElement rename(Table<?> name) {
        return new TemplateElement(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, Integer, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super Integer, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super Integer, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
