/*
 * This file is generated by jOOQ.
 */
package nl.gamedata.data.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import nl.gamedata.data.Gamedata;
import nl.gamedata.data.Indexes;
import nl.gamedata.data.Keys;
import nl.gamedata.data.tables.DashboardElement.DashboardElementPath;
import nl.gamedata.data.tables.DashboardTemplate.DashboardTemplatePath;
import nl.gamedata.data.tables.PropertyValue.PropertyValuePath;
import nl.gamedata.data.tables.records.TemplateElementRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TemplateElement extends TableImpl<TemplateElementRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>gamedata.template_element</code>
     */
    public static final TemplateElement TEMPLATE_ELEMENT = new TemplateElement();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TemplateElementRecord> getRecordType() {
        return TemplateElementRecord.class;
    }

    /**
     * The column <code>gamedata.template_element.id</code>.
     */
    public final TableField<TemplateElementRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>gamedata.template_element.dashboard_element_id</code>.
     */
    public final TableField<TemplateElementRecord, Integer> DASHBOARD_ELEMENT_ID = createField(DSL.name("dashboard_element_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>gamedata.template_element.dashboard_template_id</code>.
     */
    public final TableField<TemplateElementRecord, Integer> DASHBOARD_TEMPLATE_ID = createField(DSL.name("dashboard_template_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private TemplateElement(Name alias, Table<TemplateElementRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private TemplateElement(Name alias, Table<TemplateElementRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>gamedata.template_element</code> table reference
     */
    public TemplateElement(String alias) {
        this(DSL.name(alias), TEMPLATE_ELEMENT);
    }

    /**
     * Create an aliased <code>gamedata.template_element</code> table reference
     */
    public TemplateElement(Name alias) {
        this(alias, TEMPLATE_ELEMENT);
    }

    /**
     * Create a <code>gamedata.template_element</code> table reference
     */
    public TemplateElement() {
        this(DSL.name("template_element"), null);
    }

    public <O extends Record> TemplateElement(Table<O> path, ForeignKey<O, TemplateElementRecord> childPath, InverseForeignKey<O, TemplateElementRecord> parentPath) {
        super(path, childPath, parentPath, TEMPLATE_ELEMENT);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class TemplateElementPath extends TemplateElement implements Path<TemplateElementRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> TemplateElementPath(Table<O> path, ForeignKey<O, TemplateElementRecord> childPath, InverseForeignKey<O, TemplateElementRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private TemplateElementPath(Name alias, Table<TemplateElementRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public TemplateElementPath as(String alias) {
            return new TemplateElementPath(DSL.name(alias), this);
        }

        @Override
        public TemplateElementPath as(Name alias) {
            return new TemplateElementPath(alias, this);
        }

        @Override
        public TemplateElementPath as(Table<?> alias) {
            return new TemplateElementPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Gamedata.GAMEDATA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.TEMPLATE_ELEMENT_FK_TEMPLATE_ELEMENT_DASHBOARD_ELEMENT1_IDX, Indexes.TEMPLATE_ELEMENT_FK_TEMPLATE_ELEMENT_DASHBOARD_TEMPLATE1_IDX);
    }

    @Override
    public Identity<TemplateElementRecord, Integer> getIdentity() {
        return (Identity<TemplateElementRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<TemplateElementRecord> getPrimaryKey() {
        return Keys.KEY_TEMPLATE_ELEMENT_PRIMARY;
    }

    @Override
    public List<UniqueKey<TemplateElementRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_TEMPLATE_ELEMENT_ID_UNIQUE);
    }

    @Override
    public List<ForeignKey<TemplateElementRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_TEMPLATE_ELEMENT_DASHBOARD_ELEMENT1, Keys.FK_TEMPLATE_ELEMENT_DASHBOARD_TEMPLATE1);
    }

    private transient DashboardElementPath _dashboardElement;

    /**
     * Get the implicit join path to the <code>gamedata.dashboard_element</code>
     * table.
     */
    public DashboardElementPath dashboardElement() {
        if (_dashboardElement == null)
            _dashboardElement = new DashboardElementPath(this, Keys.FK_TEMPLATE_ELEMENT_DASHBOARD_ELEMENT1, null);

        return _dashboardElement;
    }

    private transient DashboardTemplatePath _dashboardTemplate;

    /**
     * Get the implicit join path to the
     * <code>gamedata.dashboard_template</code> table.
     */
    public DashboardTemplatePath dashboardTemplate() {
        if (_dashboardTemplate == null)
            _dashboardTemplate = new DashboardTemplatePath(this, Keys.FK_TEMPLATE_ELEMENT_DASHBOARD_TEMPLATE1, null);

        return _dashboardTemplate;
    }

    private transient PropertyValuePath _propertyValue;

    /**
     * Get the implicit to-many join path to the
     * <code>gamedata.property_value</code> table
     */
    public PropertyValuePath propertyValue() {
        if (_propertyValue == null)
            _propertyValue = new PropertyValuePath(this, null, Keys.FK_PROPERTY_VALUE_TEMPLATE_ELEMENT1.getInverseKey());

        return _propertyValue;
    }

    @Override
    public TemplateElement as(String alias) {
        return new TemplateElement(DSL.name(alias), this);
    }

    @Override
    public TemplateElement as(Name alias) {
        return new TemplateElement(alias, this);
    }

    @Override
    public TemplateElement as(Table<?> alias) {
        return new TemplateElement(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TemplateElement rename(String name) {
        return new TemplateElement(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TemplateElement rename(Name name) {
        return new TemplateElement(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TemplateElement rename(Table<?> name) {
        return new TemplateElement(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TemplateElement where(Condition condition) {
        return new TemplateElement(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TemplateElement where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TemplateElement where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TemplateElement where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TemplateElement where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TemplateElement where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TemplateElement where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TemplateElement where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TemplateElement whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TemplateElement whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
