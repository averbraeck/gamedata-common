/*
 * This file is generated by jOOQ.
 */
package nl.gamedata.data.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import nl.gamedata.data.Gamedata;
import nl.gamedata.data.Indexes;
import nl.gamedata.data.Keys;
import nl.gamedata.data.tables.Group.GroupPath;
import nl.gamedata.data.tables.Player.PlayerPath;
import nl.gamedata.data.tables.records.GroupRoleRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GroupRole extends TableImpl<GroupRoleRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>gamedata.group_role</code>
     */
    public static final GroupRole GROUP_ROLE = new GroupRole();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GroupRoleRecord> getRecordType() {
        return GroupRoleRecord.class;
    }

    /**
     * The column <code>gamedata.group_role.id</code>.
     */
    public final TableField<GroupRoleRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>gamedata.group_role.name</code>.
     */
    public final TableField<GroupRoleRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>gamedata.group_role.group_id</code>.
     */
    public final TableField<GroupRoleRecord, Integer> GROUP_ID = createField(DSL.name("group_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>gamedata.group_role.player_id</code>.
     */
    public final TableField<GroupRoleRecord, Integer> PLAYER_ID = createField(DSL.name("player_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private GroupRole(Name alias, Table<GroupRoleRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private GroupRole(Name alias, Table<GroupRoleRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>gamedata.group_role</code> table reference
     */
    public GroupRole(String alias) {
        this(DSL.name(alias), GROUP_ROLE);
    }

    /**
     * Create an aliased <code>gamedata.group_role</code> table reference
     */
    public GroupRole(Name alias) {
        this(alias, GROUP_ROLE);
    }

    /**
     * Create a <code>gamedata.group_role</code> table reference
     */
    public GroupRole() {
        this(DSL.name("group_role"), null);
    }

    public <O extends Record> GroupRole(Table<O> path, ForeignKey<O, GroupRoleRecord> childPath, InverseForeignKey<O, GroupRoleRecord> parentPath) {
        super(path, childPath, parentPath, GROUP_ROLE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class GroupRolePath extends GroupRole implements Path<GroupRoleRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> GroupRolePath(Table<O> path, ForeignKey<O, GroupRoleRecord> childPath, InverseForeignKey<O, GroupRoleRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private GroupRolePath(Name alias, Table<GroupRoleRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public GroupRolePath as(String alias) {
            return new GroupRolePath(DSL.name(alias), this);
        }

        @Override
        public GroupRolePath as(Name alias) {
            return new GroupRolePath(alias, this);
        }

        @Override
        public GroupRolePath as(Table<?> alias) {
            return new GroupRolePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Gamedata.GAMEDATA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.GROUP_ROLE_FK_GROUP_ROLE_GROUP1_IDX, Indexes.GROUP_ROLE_FK_GROUP_ROLE_PLAYER1_IDX);
    }

    @Override
    public Identity<GroupRoleRecord, Integer> getIdentity() {
        return (Identity<GroupRoleRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<GroupRoleRecord> getPrimaryKey() {
        return Keys.KEY_GROUP_ROLE_PRIMARY;
    }

    @Override
    public List<UniqueKey<GroupRoleRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_GROUP_ROLE_ID_UNIQUE);
    }

    @Override
    public List<ForeignKey<GroupRoleRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_GROUP_ROLE_GROUP1, Keys.FK_GROUP_ROLE_PLAYER1);
    }

    private transient GroupPath _group;

    /**
     * Get the implicit join path to the <code>gamedata.group</code> table.
     */
    public GroupPath group() {
        if (_group == null)
            _group = new GroupPath(this, Keys.FK_GROUP_ROLE_GROUP1, null);

        return _group;
    }

    private transient PlayerPath _player;

    /**
     * Get the implicit join path to the <code>gamedata.player</code> table.
     */
    public PlayerPath player() {
        if (_player == null)
            _player = new PlayerPath(this, Keys.FK_GROUP_ROLE_PLAYER1, null);

        return _player;
    }

    @Override
    public GroupRole as(String alias) {
        return new GroupRole(DSL.name(alias), this);
    }

    @Override
    public GroupRole as(Name alias) {
        return new GroupRole(alias, this);
    }

    @Override
    public GroupRole as(Table<?> alias) {
        return new GroupRole(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public GroupRole rename(String name) {
        return new GroupRole(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public GroupRole rename(Name name) {
        return new GroupRole(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public GroupRole rename(Table<?> name) {
        return new GroupRole(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public GroupRole where(Condition condition) {
        return new GroupRole(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public GroupRole where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public GroupRole where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public GroupRole where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public GroupRole where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public GroupRole where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public GroupRole where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public GroupRole where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public GroupRole whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public GroupRole whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
