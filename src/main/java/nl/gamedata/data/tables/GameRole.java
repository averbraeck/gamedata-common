/*
 * This file is generated by jOOQ.
 */
package nl.gamedata.data.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import nl.gamedata.data.Gamedata;
import nl.gamedata.data.Indexes;
import nl.gamedata.data.Keys;
import nl.gamedata.data.tables.records.GameRoleRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GameRole extends TableImpl<GameRoleRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>gamedata.game_role</code>
     */
    public static final GameRole GAME_ROLE = new GameRole();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GameRoleRecord> getRecordType() {
        return GameRoleRecord.class;
    }

    /**
     * The column <code>gamedata.game_role.id</code>.
     */
    public final TableField<GameRoleRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>gamedata.game_role.game_admin</code>.
     */
    public final TableField<GameRoleRecord, Byte> GAME_ADMIN = createField(DSL.name("game_admin"), SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>gamedata.game_role.game_viewer</code>.
     */
    public final TableField<GameRoleRecord, Byte> GAME_VIEWER = createField(DSL.name("game_viewer"), SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>gamedata.game_role.user_id</code>.
     */
    public final TableField<GameRoleRecord, Integer> USER_ID = createField(DSL.name("user_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>gamedata.game_role.game_id</code>.
     */
    public final TableField<GameRoleRecord, Integer> GAME_ID = createField(DSL.name("game_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private GameRole(Name alias, Table<GameRoleRecord> aliased) {
        this(alias, aliased, null);
    }

    private GameRole(Name alias, Table<GameRoleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>gamedata.game_role</code> table reference
     */
    public GameRole(String alias) {
        this(DSL.name(alias), GAME_ROLE);
    }

    /**
     * Create an aliased <code>gamedata.game_role</code> table reference
     */
    public GameRole(Name alias) {
        this(alias, GAME_ROLE);
    }

    /**
     * Create a <code>gamedata.game_role</code> table reference
     */
    public GameRole() {
        this(DSL.name("game_role"), null);
    }

    public <O extends Record> GameRole(Table<O> child, ForeignKey<O, GameRoleRecord> key) {
        super(child, key, GAME_ROLE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Gamedata.GAMEDATA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.GAME_ROLE_FK_GAME_ROLE_GAME1_IDX, Indexes.GAME_ROLE_FK_GAME_ROLE_USER_IDX);
    }

    @Override
    public Identity<GameRoleRecord, Integer> getIdentity() {
        return (Identity<GameRoleRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<GameRoleRecord> getPrimaryKey() {
        return Keys.KEY_GAME_ROLE_PRIMARY;
    }

    @Override
    public List<UniqueKey<GameRoleRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_GAME_ROLE_ID_UNIQUE);
    }

    @Override
    public List<ForeignKey<GameRoleRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_GAME_ROLE_USER, Keys.FK_GAME_ROLE_GAME1);
    }

    private transient User _user;
    private transient Game _game;

    /**
     * Get the implicit join path to the <code>gamedata.user</code> table.
     */
    public User user() {
        if (_user == null)
            _user = new User(this, Keys.FK_GAME_ROLE_USER);

        return _user;
    }

    /**
     * Get the implicit join path to the <code>gamedata.game</code> table.
     */
    public Game game() {
        if (_game == null)
            _game = new Game(this, Keys.FK_GAME_ROLE_GAME1);

        return _game;
    }

    @Override
    public GameRole as(String alias) {
        return new GameRole(DSL.name(alias), this);
    }

    @Override
    public GameRole as(Name alias) {
        return new GameRole(alias, this);
    }

    @Override
    public GameRole as(Table<?> alias) {
        return new GameRole(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public GameRole rename(String name) {
        return new GameRole(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public GameRole rename(Name name) {
        return new GameRole(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public GameRole rename(Table<?> name) {
        return new GameRole(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, Byte, Byte, Integer, Integer> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super Integer, ? super Byte, ? super Byte, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super Integer, ? super Byte, ? super Byte, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
