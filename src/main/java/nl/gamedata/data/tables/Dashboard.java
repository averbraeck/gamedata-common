/*
 * This file is generated by jOOQ.
 */
package nl.gamedata.data.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import nl.gamedata.data.Gamedata;
import nl.gamedata.data.Indexes;
import nl.gamedata.data.Keys;
import nl.gamedata.data.tables.DashboardSession.DashboardSessionPath;
import nl.gamedata.data.tables.DashboardTemplate.DashboardTemplatePath;
import nl.gamedata.data.tables.DashboardToken.DashboardTokenPath;
import nl.gamedata.data.tables.records.DashboardRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Dashboard extends TableImpl<DashboardRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>gamedata.dashboard</code>
     */
    public static final Dashboard DASHBOARD = new Dashboard();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DashboardRecord> getRecordType() {
        return DashboardRecord.class;
    }

    /**
     * The column <code>gamedata.dashboard.id</code>.
     */
    public final TableField<DashboardRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>gamedata.dashboard.name</code>.
     */
    public final TableField<DashboardRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>gamedata.dashboard.description</code>.
     */
    public final TableField<DashboardRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>gamedata.dashboard.query</code>.
     */
    public final TableField<DashboardRecord, String> QUERY = createField(DSL.name("query"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>gamedata.dashboard.dashboard_template_id</code>.
     */
    public final TableField<DashboardRecord, Integer> DASHBOARD_TEMPLATE_ID = createField(DSL.name("dashboard_template_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private Dashboard(Name alias, Table<DashboardRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Dashboard(Name alias, Table<DashboardRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>gamedata.dashboard</code> table reference
     */
    public Dashboard(String alias) {
        this(DSL.name(alias), DASHBOARD);
    }

    /**
     * Create an aliased <code>gamedata.dashboard</code> table reference
     */
    public Dashboard(Name alias) {
        this(alias, DASHBOARD);
    }

    /**
     * Create a <code>gamedata.dashboard</code> table reference
     */
    public Dashboard() {
        this(DSL.name("dashboard"), null);
    }

    public <O extends Record> Dashboard(Table<O> path, ForeignKey<O, DashboardRecord> childPath, InverseForeignKey<O, DashboardRecord> parentPath) {
        super(path, childPath, parentPath, DASHBOARD);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class DashboardPath extends Dashboard implements Path<DashboardRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> DashboardPath(Table<O> path, ForeignKey<O, DashboardRecord> childPath, InverseForeignKey<O, DashboardRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private DashboardPath(Name alias, Table<DashboardRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public DashboardPath as(String alias) {
            return new DashboardPath(DSL.name(alias), this);
        }

        @Override
        public DashboardPath as(Name alias) {
            return new DashboardPath(alias, this);
        }

        @Override
        public DashboardPath as(Table<?> alias) {
            return new DashboardPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Gamedata.GAMEDATA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.DASHBOARD_FK_DASHBOARD_DASHBOARD_TEMPLATE1_IDX);
    }

    @Override
    public Identity<DashboardRecord, Integer> getIdentity() {
        return (Identity<DashboardRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<DashboardRecord> getPrimaryKey() {
        return Keys.KEY_DASHBOARD_PRIMARY;
    }

    @Override
    public List<UniqueKey<DashboardRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_DASHBOARD_ID_UNIQUE);
    }

    @Override
    public List<ForeignKey<DashboardRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_DASHBOARD_DASHBOARD_TEMPLATE1);
    }

    private transient DashboardTemplatePath _dashboardTemplate;

    /**
     * Get the implicit join path to the
     * <code>gamedata.dashboard_template</code> table.
     */
    public DashboardTemplatePath dashboardTemplate() {
        if (_dashboardTemplate == null)
            _dashboardTemplate = new DashboardTemplatePath(this, Keys.FK_DASHBOARD_DASHBOARD_TEMPLATE1, null);

        return _dashboardTemplate;
    }

    private transient DashboardSessionPath _dashboardSession;

    /**
     * Get the implicit to-many join path to the
     * <code>gamedata.dashboard_session</code> table
     */
    public DashboardSessionPath dashboardSession() {
        if (_dashboardSession == null)
            _dashboardSession = new DashboardSessionPath(this, null, Keys.FK_DASHBOARD_SESSION_DASHBOARD1.getInverseKey());

        return _dashboardSession;
    }

    private transient DashboardTokenPath _dashboardToken;

    /**
     * Get the implicit to-many join path to the
     * <code>gamedata.dashboard_token</code> table
     */
    public DashboardTokenPath dashboardToken() {
        if (_dashboardToken == null)
            _dashboardToken = new DashboardTokenPath(this, null, Keys.FK_DASHBOARD_TOKEN_DASHBOARD1.getInverseKey());

        return _dashboardToken;
    }

    @Override
    public Dashboard as(String alias) {
        return new Dashboard(DSL.name(alias), this);
    }

    @Override
    public Dashboard as(Name alias) {
        return new Dashboard(alias, this);
    }

    @Override
    public Dashboard as(Table<?> alias) {
        return new Dashboard(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Dashboard rename(String name) {
        return new Dashboard(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Dashboard rename(Name name) {
        return new Dashboard(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Dashboard rename(Table<?> name) {
        return new Dashboard(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Dashboard where(Condition condition) {
        return new Dashboard(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Dashboard where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Dashboard where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Dashboard where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Dashboard where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Dashboard where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Dashboard where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Dashboard where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Dashboard whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Dashboard whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
