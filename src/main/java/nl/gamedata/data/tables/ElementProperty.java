/*
 * This file is generated by jOOQ.
 */
package nl.gamedata.data.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import nl.gamedata.data.Gamedata;
import nl.gamedata.data.Indexes;
import nl.gamedata.data.Keys;
import nl.gamedata.data.tables.DashboardElement.DashboardElementPath;
import nl.gamedata.data.tables.PropertyValue.PropertyValuePath;
import nl.gamedata.data.tables.records.ElementPropertyRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ElementProperty extends TableImpl<ElementPropertyRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>gamedata.element_property</code>
     */
    public static final ElementProperty ELEMENT_PROPERTY = new ElementProperty();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ElementPropertyRecord> getRecordType() {
        return ElementPropertyRecord.class;
    }

    /**
     * The column <code>gamedata.element_property.id</code>.
     */
    public final TableField<ElementPropertyRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>gamedata.element_property.code</code>.
     */
    public final TableField<ElementPropertyRecord, String> CODE = createField(DSL.name("code"), SQLDataType.VARCHAR(16).nullable(false), this, "");

    /**
     * The column <code>gamedata.element_property.name</code>.
     */
    public final TableField<ElementPropertyRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>gamedata.element_property.description</code>.
     */
    public final TableField<ElementPropertyRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>gamedata.element_property.type</code>.
     */
    public final TableField<ElementPropertyRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>gamedata.element_property.dashboard_element_id</code>.
     */
    public final TableField<ElementPropertyRecord, Integer> DASHBOARD_ELEMENT_ID = createField(DSL.name("dashboard_element_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private ElementProperty(Name alias, Table<ElementPropertyRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ElementProperty(Name alias, Table<ElementPropertyRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>gamedata.element_property</code> table reference
     */
    public ElementProperty(String alias) {
        this(DSL.name(alias), ELEMENT_PROPERTY);
    }

    /**
     * Create an aliased <code>gamedata.element_property</code> table reference
     */
    public ElementProperty(Name alias) {
        this(alias, ELEMENT_PROPERTY);
    }

    /**
     * Create a <code>gamedata.element_property</code> table reference
     */
    public ElementProperty() {
        this(DSL.name("element_property"), null);
    }

    public <O extends Record> ElementProperty(Table<O> path, ForeignKey<O, ElementPropertyRecord> childPath, InverseForeignKey<O, ElementPropertyRecord> parentPath) {
        super(path, childPath, parentPath, ELEMENT_PROPERTY);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ElementPropertyPath extends ElementProperty implements Path<ElementPropertyRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> ElementPropertyPath(Table<O> path, ForeignKey<O, ElementPropertyRecord> childPath, InverseForeignKey<O, ElementPropertyRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ElementPropertyPath(Name alias, Table<ElementPropertyRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ElementPropertyPath as(String alias) {
            return new ElementPropertyPath(DSL.name(alias), this);
        }

        @Override
        public ElementPropertyPath as(Name alias) {
            return new ElementPropertyPath(alias, this);
        }

        @Override
        public ElementPropertyPath as(Table<?> alias) {
            return new ElementPropertyPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Gamedata.GAMEDATA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.ELEMENT_PROPERTY_FK_ELEMENT_PROPERTY_DASHBOARD_ELEMENT1_IDX);
    }

    @Override
    public Identity<ElementPropertyRecord, Integer> getIdentity() {
        return (Identity<ElementPropertyRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ElementPropertyRecord> getPrimaryKey() {
        return Keys.KEY_ELEMENT_PROPERTY_PRIMARY;
    }

    @Override
    public List<UniqueKey<ElementPropertyRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_ELEMENT_PROPERTY_CODE_UNIQUE, Keys.KEY_ELEMENT_PROPERTY_ID_UNIQUE);
    }

    @Override
    public List<ForeignKey<ElementPropertyRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_ELEMENT_PROPERTY_DASHBOARD_ELEMENT1);
    }

    private transient DashboardElementPath _dashboardElement;

    /**
     * Get the implicit join path to the <code>gamedata.dashboard_element</code>
     * table.
     */
    public DashboardElementPath dashboardElement() {
        if (_dashboardElement == null)
            _dashboardElement = new DashboardElementPath(this, Keys.FK_ELEMENT_PROPERTY_DASHBOARD_ELEMENT1, null);

        return _dashboardElement;
    }

    private transient PropertyValuePath _propertyValue;

    /**
     * Get the implicit to-many join path to the
     * <code>gamedata.property_value</code> table
     */
    public PropertyValuePath propertyValue() {
        if (_propertyValue == null)
            _propertyValue = new PropertyValuePath(this, null, Keys.FK_PROPERTY_VALUE_ELEMENT_PROPERTY1.getInverseKey());

        return _propertyValue;
    }

    @Override
    public ElementProperty as(String alias) {
        return new ElementProperty(DSL.name(alias), this);
    }

    @Override
    public ElementProperty as(Name alias) {
        return new ElementProperty(alias, this);
    }

    @Override
    public ElementProperty as(Table<?> alias) {
        return new ElementProperty(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ElementProperty rename(String name) {
        return new ElementProperty(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ElementProperty rename(Name name) {
        return new ElementProperty(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ElementProperty rename(Table<?> name) {
        return new ElementProperty(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ElementProperty where(Condition condition) {
        return new ElementProperty(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ElementProperty where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ElementProperty where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ElementProperty where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ElementProperty where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ElementProperty where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ElementProperty where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ElementProperty where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ElementProperty whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ElementProperty whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
